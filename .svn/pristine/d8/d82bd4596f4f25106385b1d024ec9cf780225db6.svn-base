#----------------------------------------------------------------
# diallel analysis - multi-environment                
# Griffing Method 4                      
# (F1's only)                            
# 
# SAS Script Created by: MS Kang                            
# R Script Created by: Violeta Bartolome   09.2011
# R Script Modified by: Nellwyn M. Levita  10.28.2011 
#----------------------------------------------------------------

diallel4TestME <-
  function(design = c("CRD", "RCB", "Alpha", "RowColumn"), data, respvar, p1, p2, rep=NULL, block=NULL, row=NULL, column=NULL, cross=TRUE, individual=NULL, environment, alpha=0.05) {
    
    options(show.signif.stars=FALSE)
    data <- eval(parse(text = data))
    
    ## --- trim the strings --- #
    respvar <- trim.strings(respvar)
    p1 <- trim.strings(p1)
    p2 <- trim.strings(p2)
    if (!is.null(block)) {block <- trim.strings(block) }
    if (!is.null(rep)) {rep <- trim.strings(rep) }
    if (!is.null(row)) {row <- trim.strings(row) }
    if (!is.null(column)) {column <- trim.strings(column) }
    if (!is.null(individual)) {individual <- trim.strings(individual) }
    environment <-trim.strings(environment)
    alpha <- trim.strings(alpha)
    
    # --- create titles --- #
    if (design == "CRD") { designName<-"CRD"}
    if (design == "RCB") { designName<-"RCB"}
    if (design == "Alpha") { designName<-"ALPHA-LATTICE"}
    if (design == "RowColumn") { designName<-"ROW-COLUMN"}
    
    if (cross) {parentsType<-"CROSS"
    } else {parentsType<-"SELF"}
    cat("\nMULTIPLE ENVIRONMENT ANALYSIS\n")
    cat("\nDIALLEL ANALYSIS: GRIFFING METHOD IV IN ",designName, " (", parentsType, ")\n", sep="")
    
    # --- define factors --- #
    data[,match(p1, names(data))] <- factor(trim.strings(data[,match(p1, names(data))]))
    data[,match(p2, names(data))] <- factor(trim.strings(data[,match(p2, names(data))]))
    data[,match(environment, names(data))] <- factor(trim.strings(data[,match(environment, names(data))]))
    if (design == "RCB") {data[,match(block, names(data))] <- factor(trim.strings(data[,match(block, names(data))]))  }
    if (design == "Alpha") {
      data[,match(rep, names(data))] <- factor(trim.strings(data[,match(rep, names(data))]))  
      data[,match(block, names(data))] <- factor(trim.strings(data[,match(block, names(data))]))
    }
    if (design == "RowColumn") {
      data[,match(rep, names(data))] <- factor(trim.strings(data[,match(rep, names(data))]))  
      data[,match(row, names(data))] <- factor(trim.strings(data[,match(row, names(data))]))
      data[,match(column, names(data))] <- factor(trim.strings(data[,match(column, names(data))]))
    }
    
    #--- CREATION OF ESTIMABLE EFFECTS ---#
    name1 <- levels(data[,match(p1, names(data))])
    name2 <- levels(data[,match(p2, names(data))])
    name <- unique(c(name1, name2))
    
    p <- nlevels(factor(name))
    i <- rep(1:p, each=p)
    j <- rep(1:p,p)
    #   ID <- data.frame(i,j)
    ID <- data.frame(i,j,IDparent1=name[i], IDparent2=name[j])
    
    #--- for method 4 ---#
    M4 <- subset(ID, i < j)
    t <- nrow(M4)
    
    #--- GCA estimable effects ---#
    GCA <- as.matrix(rep(0,t*(p-1)),nrow=t, ncol=(p-1))
    dim(GCA) <- c(t,(p-1))
    for (o in 1:t)
      for (n in 1:(p-1))  { 
        GCA[o,n] <- (as.logical(M4[o,"i"]==n)-
          as.logical(M4[o,"i"]==p))+
          (as.logical(M4[o,"j"]==n)-
          as.logical(M4[o,"j"]==p))  
      }
    
    colnames(GCA) <- paste("GCA", 1:(p-1), sep="")
    
    #--- SCA estimable effects ---#
    sca.col <- as.data.frame(subset(ID, (i<=(p-3) & (j >= (i+1) & j<=(p-1)))))
    ncol <- nrow(sca.col)
    
    SCA <- as.matrix(rep(0,t*ncol),nrow=t, ncol=ncol)
    dim(SCA) <- c(t,ncol)
    
    for (o in 1:t)
      for (n in 1:ncol)  {
        SCA[o,n] <- as.logical(M4[o,"i"]==sca.col[n,"i"])*
          as.logical(M4[o,"j"]==sca.col[n,"j"])-
          (as.logical(M4[o,"i"]==sca.col[n,"i"])+
          as.logical(M4[o,"i"]==sca.col[n,"j"]))*
          as.logical(M4[o,"j"]==p);
        if (((M4[o,"i"]>=(p-2))&(M4[o,"j"]>=(p-1)))|((M4[o,"i"]>=(p-1))&(M4[o,"j"]>=(p-2))))  {
          SCA[o,n] <- -1*as.logical(M4[o,"i"]==(p-2))*
            as.logical(M4[o,"j"]==(p-1))+
            as.logical(M4[o,"i"]>=(p-2))*
            as.logical(M4[o,"j"]==p)*
            as.logical(M4[o,"i"] != sca.col[n,"j"])  
        }
      }
    colnames(SCA) <- paste("SCA",sca.col$"i", sca.col$j, sep="")
    #M4<-M4[,c(-1,-2)]
    
    # end of CREATION OF GCA, SCA
    
    library(doBy)
    result <- list()
    for (z in (1:length(respvar))) {
      result[[z]] <- list()
      cat("\n-----------------------------")
      cat("\nRESPONSE VARIABLE: ", respvar[z], "\n", sep="")
      cat("-----------------------------\n")
      
      if (design == "CRD") {
        vec<-c(match(p1, names(data)), match(p2, names(data)), match(environment, names(data)), match(respvar[z], names(data)))
        temp2.data <-subset(data, select=vec)  
      }
      if (design == "RCB") {
        vec<-c(match(p1, names(data)), match(p2, names(data)), match(environment, names(data)), match(block, names(data)), match(respvar[z], names(data)))
        temp2.data <-subset(data, select=vec)
      }
      if (design == "Alpha") {
        vec<-c(match(p1, names(data)), match(p2, names(data)), match(environment, names(data)), match(rep, names(data)), match(block, names(data)), match(respvar[z], names(data)))
        temp2.data <-subset(data, select=vec)  
      }
      if (design == "RowColumn") {
        vec<-c(match(p1, names(data)), match(p2, names(data)), match(environment, names(data)), match(rep, names(data)), match(row, names(data)), match(column, names(data)), match(respvar[z], names(data)))
        temp2.data <-subset(data, select=vec)  
      }
      temp.data <- temp2.data[(is.na(temp2.data[,match(respvar[z], names(temp2.data))]) == FALSE),]
      
      # --- create new column containing treatment combinations --- #
      temp.data$crossEnv<-factor(paste(temp.data[,p1], ":", temp.data[,p2], ":", temp.data[,environment], sep=""))
      temp.data<-temp.data[order(temp.data$crossEnv),]
      
      # --- compute harmonic mean that will be used later in the estimation of genetic variances --- #
      lengthPerCross<-tapply(temp.data[,respvar[z]], temp.data$crossEnv, length)
      repHarmonicMean<-1/mean((1/lengthPerCross), na.rm=TRUE)
      
      e <- nlevels(temp.data[,match(environment, names(temp.data))])
      if (design == "CRD") {
        # --- add column Rep --- #
        temp.data<-data.frame(temp.data, Rep=sequence(lengthPerCross))
        
        nlevelsRep<-max(lengthPerCross, na.rm=TRUE) 
      }
      if (design == "RCB") {nlevelsRep <- nlevels(temp.data[,match(block, names(temp.data))]) }
      if (design == "Alpha" || design == "RowColumn") {nlevelsRep <- nlevels(temp.data[,match(rep, names(temp.data))]) }
      
      nBalance<-(ncol(combn(p,2)))*e*nlevelsRep
      temp.data<-temp.data[-c(match("crossEnv", names(temp.data)))]
      
      # --- data summary --- #
      funcTrialSum <- class.information2(names(temp.data),temp.data)
      cat("\nDATA SUMMARY: ","\n\n", sep="")
      print(funcTrialSum)
      cat("\n Number of observations read: ",nrow(temp.data), sep="")
      cat("\n Number of missing observations: ",nBalance-nrow(temp.data), sep="")
      
      # --- check if raw data is balanced. If not, generate estimates for missing values --- #
      canEstimateMissing <- TRUE
      cat("\n\n\nANOVA TABLE:\n\n")
      if ((nrow(temp.data)/nBalance) >= 0.90) {
        if (nrow(temp.data) == nBalance) {
          anovaRemark <- "REMARK: Raw dataset is balanced."
          dataForAnova<-temp.data  
        } else {
          # estimate missing values per environment
          dataForAnova<-NULL
          for (x in (1:e)) {
            if (design == "CRD") {
              tempSplit<-temp.data[temp.data[,environment]==levels(temp.data[,match(environment, names(temp.data))])[x],]
              tempDataForAnova<-tempSplit[,c(p1, p2, "Rep", respvar[z])]
              tempDataForAnova[,match("Rep", names(tempDataForAnova))] <- factor(trim.strings(tempDataForAnova[,match("Rep", names(tempDataForAnova))]))
              balancedData<-generateBalancedData(design="DIALLEL4", data=tempDataForAnova, respvar[z], p1, p2, "Rep")
              tempDataForAnova<-estimateMissingData(design="CRD", data=balancedData, respvar[z], p1, p2, "Rep")
              tempDataForAnova<-tempDataForAnova[,c(p1, p2, "Rep", respvar[z])]
            }
            if (design == "RCB") {
              tempSplit<-temp.data[temp.data[,environment]==levels(temp.data[,match(environment, names(temp.data))])[x],]
              tempDataForAnova<-tempSplit[,c(p1, p2, block, respvar[z])]
              balancedData<-generateBalancedData(design="DIALLEL4", data=tempDataForAnova, respvar[z], p1, p2, block)
              tempDataForAnova<-estimateMissingData(design="RCB", data=balancedData, respvar[z], p1, p2, block)
              tempDataForAnova<-tempDataForAnova[,c(p1, p2, block, respvar[z])]
            }
            if (design == "Alpha") {
              temp2Split<-temp2.data[temp2.data[,environment]==levels(temp2.data[,match(environment, names(temp2.data))])[x],]
              tempSplit<-temp.data[temp.data[,environment]==levels(temp.data[,match(environment, names(temp.data))])[x],]
              if (nrow(tempSplit)==nBalance/e) {
                tempDataForAnova<-tempSplit[,c(p1, p2, rep, block, respvar[z])]
              } else {
                if (nrow(temp2Split)==nBalance/e) {
                  tempDataForAnova<-temp2Split[,c(p1, p2, rep, block, respvar[z])]
                  tempDataForAnova<-estimateNA(design="Alpha", fullData=tempDataForAnova, respvar[z], p1, p2, rep, block, row=NULL, column=NULL)
                } else {
                  tempDataForAnova<-temp2Split[,c(p1, p2, rep, block, respvar[z])]
                  canEstimateMissing<-FALSE
                }
              }
            }
            if (design == "RowColumn") {
              temp2Split<-temp2.data[temp2.data[,environment]==levels(temp2.data[,match(environment, names(temp2.data))])[x],]
              tempSplit<-temp.data[temp.data[,environment]==levels(temp.data[,match(environment, names(temp.data))])[x],]
              if (nrow(tempSplit)==nBalance/e) {
                tempDataForAnova<-tempSplit[,c(p1, p2, rep, row, column, respvar[z])]
              } else {
                if (nrow(temp2Split)==nBalance/e) {
                  tempDataForAnova<-temp2Split[,c(p1, p2, rep, row, column, respvar[z])]
                  tempDataForAnova<-estimateNA(design="RowColumn", fullData=tempDataForAnova, respvar[z], p1, p2, rep, block=NULL, row, column)
                } else {
                  tempDataForAnova<-temp2Split[,c(p1, p2, rep, row, column, respvar[z])]
                  canEstimateMissing<-FALSE
                }
              }
            }
            tempDataForAnova$EnvIndex<-levels(temp.data[,match(environment, names(temp.data))])[x]
            dataForAnova<-rbind(dataForAnova,tempDataForAnova)
          }
          colnames(dataForAnova)[match("EnvIndex",names(dataForAnova))]<-environment
          dataForAnova[,match(environment, names(dataForAnova))] <- factor(dataForAnova[,match(environment, names(dataForAnova))])
          
          if (canEstimateMissing==TRUE) {anovaRemark <- "REMARK: Raw data and estimates of the missing values are used."
          } else {anovaRemark <- "REMARK: Cannot estimate missing values because some treatment combinations are not specified in the data."}
          
        }
        r<-nlevelsRep
        
        if (canEstimateMissing==TRUE) {
          # --- one-step ANOVA --- #
          #if (design == "CRD") {myformula1 <- paste(respvar[z], " ~ ", environment, " + ", p1, ":", p2, " + ", environment, ":", p1, ":", p2, sep = "") }
          #if (design == "RCB") {myformula1 <- paste(respvar[z], " ~ ", environment, " + ", block, ":", environment," + ", p1, ":", p2, " + ", environment, ":", p1, ":", p2, sep = "") }
          
          # --- two-step ANOVA --- #
          if (design == "CRD") {
            # --- step 1 ANOVA ---#
            myformula1 <- paste(respvar[z], " ~ ", environment, sep = "")
            out1 <- anova(aov(formula(myformula1), data = dataForAnova))
            totalSS1<-sum(out1[,2])
            totalDF1<-sum(out1[,1])
            
            # --- step 2 ANOVA ---#
            # --- compute the means --- #
            myformula2 <- paste(respvar[z], " ~ ", p1, "+", p2," + ", environment, sep = "")
            meanData<-summaryBy (formula(myformula2),data=dataForAnova,FUN=c(mean))
            
            myformula3 <- paste(respvar[z], ".mean ~ ", p1, ":", p2," + ", environment, sep = "")
            out2<-anova(aov(formula(myformula3),data=meanData))
            
            DFvector2<-out2[,1]
            SSvector2<-r*out2[,2]
            totalDF2<-sum(out2[,1])
            totalSS2<-sum(r*out2[,2])
            
            # --- construct ANOVA table --- #
            ESS<-totalSS1-totalSS2
            EDF<-totalDF1- totalDF2
            Df<-c(DFvector2,EDF)
            SS<-round(c(SSvector2,ESS),digits=2)
            MS<-round(SS/Df,digits=2)
            F_value<-round(c(MS[1]/MS[4],MS[2]/MS[3],MS[3]/MS[4],MS[4]/MS[4]),digits=2)
            p_value<-round(pf(F_value,Df,c(Df[4],Df[3],Df[4],Df[4]),lower.tail = F),digits=4)
            AOV<-cbind(Df,SS, MS,F_value,p_value)
            
            row.names(AOV)<-c(environment,"Hybrid",paste("Hybrid x ",environment,sep=""),"Error")
            AOV[4,4:5]<-NA
          }      
          
          if (design == "RCB") {
            # --- step 1 ANOVA ---#
            myformula1 <- paste(respvar[z], " ~ ", block, ":", environment," + ", environment, sep = "")
            out1 <- anova(aov(formula(myformula1), data = dataForAnova))
            blockEnv <- paste(block, ":", environment,sep="")
            repEnvDF <- out1[rownames(out1)==blockEnv,"Df"]
            repEnvSS <- out1[rownames(out1)==blockEnv,"Sum Sq"]
            totalSS1<-sum(out1[,2])
            totalDF1<-sum(out1[,1])
            
            # --- step 2 ANOVA ---#
            # --- compute the means --- #
            myformula2 <- paste(respvar[z], " ~ ", p1, "+", p2," + ", environment, sep = "")
            meanData<-summaryBy (formula(myformula2),data=dataForAnova,FUN=c(mean))
            
            myformula3 <- paste(respvar[z], ".mean ~ ", p1, ":", p2," + ", environment, sep = "")
            out2<-anova(aov(formula(myformula3),data=meanData))
            
            envDF<-out2[rownames(out2)==environment,"Df"]
            envSS<-r*out2[rownames(out2)==environment,"Sum Sq"]
            DFvector2<-out2[2:3,1]
            SSvector2<-r*out2[2:3,2]
            totalDF2<-sum(out2[,1])
            totalSS2<-sum(r*out2[,2])
            
            # --- construct ANOVA table --- #
            ESS<-totalSS1-totalSS2-repEnvSS
            EDF<-totalDF1- totalDF2-repEnvDF
            Df<-c(envDF,repEnvDF,DFvector2,EDF)
            SS<-round(c(envSS,repEnvSS,SSvector2,ESS),digits=2)
            MS<-round(SS/Df,digits=2)
            F_value<-round(c(MS[1]/MS[2],MS[2]/MS[5],MS[3]/MS[4],MS[4]/MS[5],MS[5]/MS[5]),digits=2)
            p_value<-round(pf(F_value,Df,c(Df[2],Df[5],Df[4],Df[5],Df[5]),lower.tail = F),digits=4)
            AOV<-cbind(Df,SS, MS,F_value,p_value)
            
            row.names(AOV)<-c(environment,paste(block,"(",environment,")",sep=""),"Hybrid",paste("Hybrid x ",environment,sep=""),"Error")
            AOV[5,4:5]<-NA
          }
          
          if (design == "Alpha") {
            # --- step 1 ANOVA ---#
            myformula1 <- paste(respvar[i], " ~ ", environment, " + ", environment, ":", rep, " + ", environment, ":", rep, ":", block, sep = "")
            out1 <- anova(aov(formula(myformula1), data = dataForAnova))
            envRepDF <- out1[rownames(out1)==paste(environment, ":", rep,sep=""),"Df"]
            envRepSS <- out1[rownames(out1)==paste(environment, ":", rep,sep=""),"Sum Sq"]
            envRepBlockDF<-out1[rownames(out1)==paste(environment, ":", rep,":", block, sep=""),"Df"]
            envRepBlockSS<-out1[rownames(out1)==paste(environment, ":", rep,":", block, sep=""),"Sum Sq"]
            totalSS1<-sum(out1[,2])
            totalDF1<-sum(out1[,1])
            
            # --- step 2 ANOVA ---#
            # --- compute the means --- #
            myformula2 <- paste(respvar[z], " ~ ", p1, "+", p2," + ", environment, sep = "")
            meanData<-summaryBy (formula(myformula2),data=dataForAnova,FUN=c(mean))
            
            myformula3 <- paste(respvar[z], ".mean ~ ", p1, ":", p2," + ", environment, sep = "")
            out2<-anova(aov(formula(myformula3),data=meanData))
            
            envDF<-out2[rownames(out2)==environment,"Df"]
            envSS<-r*out2[rownames(out2)==environment,"Sum Sq"]
            DFvector2<-out2[2:3,1]
            SSvector2<-r*out2[2:3,2]
            totalDF2<-sum(out2[,1])
            totalSS2<-sum(r*out2[,2])
            
            # --- construct ANOVA table --- #
            ESS<-totalSS1-totalSS2-envRepSS-envRepBlockSS
            EDF<-totalDF1-totalDF2-envRepDF-envRepBlockDF
            Df<-c(envDF,envRepDF,envRepBlockDF,DFvector2,EDF)
            SS<-round(c(envSS,envRepSS,envRepBlockSS,SSvector2,ESS),digits=2)
            MS<-round(SS/Df,digits=2)
            F_value<-round(c(MS[1]/MS[2],MS[2]/MS[6],MS[3]/MS[6],MS[4]/MS[5],MS[5]/MS[6],MS[6]/MS[6]),digits=2)
            p_value<-round(pf(F_value,Df,c(Df[2],Df[6],Df[6],Df[5],Df[6],Df[6]),lower.tail = F),digits=4)
            AOV<-cbind(Df,SS, MS,F_value,p_value)
            
            row.names(AOV)<-c(environment,paste(environment,":",rep,sep=""),paste(environment,":",rep,":",block,sep=""),"Hybrid",paste("Hybrid x ",environment,sep=""),"Error")
            AOV[6,4:5]<-NA
          }
          
          if (design == "RowColumn") {
            # --- step 1 ANOVA ---#
            myformula1 <- paste(respvar[i], " ~ ", environment, " + ", environment, ":", rep, " + ", environment, ":", rep, ":", row, " + ", environment, ":", rep, ":", column, sep = "") 
            out1 <- anova(aov(formula(myformula1), data = dataForAnova))
            envRepDF <- out1[rownames(out1)==paste(environment, ":", rep,sep=""),"Df"]
            envRepSS <- out1[rownames(out1)==paste(environment, ":", rep,sep=""),"Sum Sq"]
            envRepRowDF<-out1[rownames(out1)==paste(environment, ":", rep,":", row, sep=""),"Df"]
            envRepRowSS<-out1[rownames(out1)==paste(environment, ":", rep,":", row, sep=""),"Sum Sq"]
            envRepColumnDF<-out1[rownames(out1)==paste(environment, ":", rep,":", column, sep=""),"Df"]
            envRepColumnSS<-out1[rownames(out1)==paste(environment, ":", rep,":", column, sep=""),"Sum Sq"]
            totalSS1<-sum(out1[,2])
            totalDF1<-sum(out1[,1])
            
            # --- step 2 ANOVA ---#
            # --- compute the means --- #
            myformula2 <- paste(respvar[z], " ~ ", p1, "+", p2," + ", environment, sep = "")
            meanData<-summaryBy (formula(myformula2),data=dataForAnova,FUN=c(mean))
            
            myformula3 <- paste(respvar[z], ".mean ~ ", p1, ":", p2," + ", environment, sep = "")
            out2<-anova(aov(formula(myformula3),data=meanData))
            
            envDF<-out2[rownames(out2)==environment,"Df"]
            envSS<-r*out2[rownames(out2)==environment,"Sum Sq"]
            DFvector2<-out2[2:3,1]
            SSvector2<-r*out2[2:3,2]
            totalDF2<-sum(out2[,1])
            totalSS2<-sum(r*out2[,2])
            
            # --- construct ANOVA table --- #
            ESS<-totalSS1-totalSS2-envRepSS-envRepRowSS-envRepColumnSS
            EDF<-totalDF1-totalDF2-envRepDF-envRepRowDF-envRepColumnDF
            Df<-c(envDF,envRepDF,envRepRowDF,envRepColumnDF,DFvector2,EDF)
            SS<-round(c(envSS,envRepSS,envRepRowSS,envRepColumnSS,SSvector2,ESS),digits=2)
            MS<-round(SS/Df,digits=2)
            F_value<-round(c(MS[1]/MS[2],MS[2]/MS[7],MS[3]/MS[7],MS[4]/MS[7],MS[5]/MS[6],MS[6]/MS[7],MS[7]/MS[7]),digits=2)
            p_value<-round(pf(F_value,Df,c(Df[2],Df[7],Df[7],Df[7],Df[6],Df[7],Df[7]),lower.tail = F),digits=4)
            AOV<-cbind(Df,SS, MS,F_value,p_value)
            
            row.names(AOV)<-c(environment,paste(environment,":",rep,sep=""),paste(environment,":",rep,":",row,sep=""),paste(environment,":",rep,":",column,sep=""),"Hybrid",paste("Hybrid x ",environment,sep=""),"Error")
            AOV[7,4:5]<-NA
          }
        
          print(AOV,na.print="")
          cat("-------\n")
          cat(anovaRemark)
          cat("\n")
          result[[z]]$anova.table <- AOV
          
          # compute Sum of Squares of GCA, SCA
          data.all.gca <- merge(meanData, as.data.frame(cbind(M4,GCA,SCA)), by.x=c(p1,p2), by.y=c("IDparent1","IDparent2"))
          data.all.gca <- data.all.gca[,-c(match("i", names(data.all.gca)),match("j", names(data.all.gca)))]
          
          myformula4 <- paste(respvar[z],".mean ~ ", environment, " + . - ", p1, " - ", p2, " + (. - ", p1, " - ", p2, "):",environment, sep = "")
          
          #GCA
          out.gca <- anova(aov(formula(myformula4), data = data.all.gca))
          GCA.effect <- subset(out.gca, substr(rownames(out.gca),1,3)=="GCA")
          GCA.df <- sum(GCA.effect$Df)
          GCA.SS <- sum(GCA.effect$"Sum Sq")*r
          GCA.MS <- GCA.SS/GCA.df
          
          envgca <- paste(environment, ":GCA",sep="")
          GCAxE.effect <- subset(out.gca, substr(rownames(out.gca),1,(nchar(environment)+4))==envgca)
          GCAxE.df <- sum(GCAxE.effect$Df)
          GCAxE.SS <- sum(GCAxE.effect$"Sum Sq")*r
          GCAxE.MS <- GCAxE.SS/GCAxE.df
          
          #SCA
          SCA.effect <- subset(out.gca, substr(rownames(out.gca),1,3)=="SCA")
          SCA.df <- sum(SCA.effect$Df)
          #SCA.SS <- sum(SCA.effect$"Sum Sq")*r
          SCA.SS <- AOV[row.names="Hybrid",col.names="SS"]-GCA.SS
          SCA.MS <- SCA.SS/SCA.df
          
          envsca <- paste(environment, ":SCA",sep="")
          SCAxE.effect <- subset(out.gca, substr(rownames(out.gca),1,(nchar(environment)+4))==envsca)
          SCAxE.df <- sum(SCAxE.effect$Df)
          #SCAxE.SS <- sum(SCAxE.effect$"Sum Sq")*r
          SCAxE.SS <- AOV[row.names=paste("Hybrid x ",environment,sep=""),col.names="SS"]-GCAxE.SS
          SCAxE.MS <- SCAxE.SS/SCAxE.df
          
          # --- construct ANOVA table --- #
          DF=c(GCA.df,SCA.df,GCAxE.df,SCAxE.df,EDF)
          SS=round(c(GCA.SS,SCA.SS,GCAxE.SS,SCAxE.SS,ESS),digits=2)
          MS<-round(SS/DF,digits=2)
          F_value<-round(c(MS[1]/MS[3],MS[2]/MS[4],MS[3]/MS[5],MS[4]/MS[5],MS[5]/MS[5]),digits=2)
          p_value<-round(pf(F_value,DF,c(DF[3],DF[4],DF[5],DF[5],DF[5]),lower.tail = F),digits=4)
          AOV2<-cbind(DF,SS, MS,F_value,p_value)
          
          row.names(AOV2)<-c("GCA", "SCA", "GCAxE", "SCAxE", "Error")
          AOV2[5,4:5]<-NA
          
          cat("\n\nANOVA TABLE:\n\n")
          print(AOV2, na.print="")
          cat("-------\n")
          cat(anovaRemark)
          cat("\n")
          result[[z]]$anova2.table <- AOV2
      
          # --- Estimates of GCA, SCA --- #
          
          myformula4<- paste(respvar[z], " ~ ", p1," + ",p2, sep = "")
          meandata <- summaryBy(formula(myformula4), data=temp.data)
          
          # serial to parallel of meandata
          mdata <- as.matrix(rep(0,p*p),nrow=p, ncol=p)
          dim(mdata) <- c(p,p)
          
          for (I in 1:p)  {
            for (J in 1:p)   {
              if (I < J) mdata[I,J] <- meandata[(meandata[,match(p1, names(meandata))]==levels(factor(name))[I] & meandata[,match(p2, names(meandata))]==levels(factor(name))[J]),3]
            } 
          }
          
          # printing the matrix of means
          mdata2 <- format(round(mdata, 4),nsmall=4)
          rownames(mdata2) <- colnames(mdata2) <- levels(factor(name))
          mdata3 <-noquote(format(gsub(" 0.0000", "", mdata2),justify="right"))
          cat("\n\nMATRIX OF MEANS:\n\n")
          print(mdata3)
          cat("-------\n")
          cat(anovaRemark)
          cat("\n")
          result[[z]]$means.matrix <- mdata3
          
          mirror <- mdata
          
          for (I in 1:p)  {
            for (J in 1:p)   {
              if (I > J) mirror[I,J] <- mirror[J,I]
            } 
          }
          
          XI <- colSums(mirror)
          SUMX <- sum(mdata)
          
          #----- Estimates of GCA Effects -----#
          G_SCA <- as.matrix(rep(0,p*p),nrow=p, ncol=p)
          dim(G_SCA) <- c(p,p)
          for (I in 1:p)  {
            for (J in 1:p)   {
              if (I == J) G_SCA[I,J] <- (1/(p*(p-2))) * (p*XI[I]-(2*SUMX))
            } 
          }
          
          #----- Estimates of SCA Effects -----#
          for (I in 1:p)  {
            for (J in 1:p)   {
              if (I < J)   {
                B1 <- (1/(p-2))* (XI[I] + XI[J])
                B2 <- (2/((p-1)*(p-2)))*SUMX
                G_SCA[I,J] <- mdata[I,J] - B1 + B2
              }
            } 
          }
          colnames(G_SCA) <- rownames(G_SCA) <- levels(factor(name))
          
          G_SCA2 <-format(round(G_SCA, digits=4), nsmall=4)
          G_SCA3 <-noquote(format(gsub(" 0.0000", "", G_SCA2),justify="right"))
          cat("\n\nGENERAL COMBINING ABILITY EFFECTS (diagonal), SPECIFIC COMBINING\n")
          cat("ABILITY EFFECTS (above diagonal):\n\n")
          print(G_SCA3)
          result[[z]]$gcasca.matrix <- G_SCA3
          
          # --- estimates of standard errors --- #
          EMS=ESS/EDF
          MEPRIME <-EMS/r      
          Ve <- MEPRIME
          SE_GI <- sqrt((p-1)*Ve/(p*e*(p-2)))
          LSD_GI <- NA
          SE_SIJ <- sqrt((p-3)*Ve/(e*(p-1)))
          LSD_SIJ <- NA
          
          SE_Gdiff <- sqrt(2*Ve/(e*(p-2)))
          LSD_Gdiff <- qt(.975,EDF)*SE_Gdiff
          SE_SIJ_SIK <- sqrt(2*(p-3)*Ve/(e*(p-2)))
          LSD_SIJ_SIK <- qt(.975,EDF)*SE_SIJ_SIK
          SE_SIJ_SKL <- sqrt(2*(p-4)*Ve/(e*(p-2)))
          LSD_SIJ_SKL <- qt(.975,EDF)*SE_SIJ_SKL
          
          STDERR <- round(rbind(SE_GI,SE_SIJ, SE_Gdiff, SE_SIJ_SIK, SE_SIJ_SKL), digits=4)
          LSD <- round(rbind(LSD_GI,LSD_SIJ, LSD_Gdiff, LSD_SIJ_SIK, LSD_SIJ_SKL),digits=4)
          VAREST <- as.table(cbind(STDERR, LSD))
          
          rownames(VAREST) <- c(' Gi', ' Sij', ' Gi-Gj', ' Sij-Sik', ' Sij-Skl')
          colnames(VAREST) <- c("Std. Error", "LSD")
          cat("\n\nTABLE OF STANDARD ERRORS AND LSDs:\n\n")
          print(VAREST)
          result[[z]]$stderror.table <- VAREST
          
          #--- Variance Component ---#
          
          Vg <- (GCA.MS-GCAxE.MS-SCA.MS+SCAxE.MS)/(r*e*(p-2))
          Vs <- (SCA.MS-SCAxE.MS)/(r*e)
          Vge <- (GCAxE.MS-SCAxE.MS)/(r*(p-2))
          Vse <- (SCAxE.MS-EMS)/r
          
          VC <- round(rbind(Vg, Vs, Vge, Vse, EMS), digits=4)
          colnames(VC) <- c("Estimate")
          rownames(VC) <- c(" GCA", " SCA", " GCAxE", " SCAxE", " Error")
          TABLE <- as.table(VC)
          cat("\n\nESTIMATES OF VARIANCE COMPONENTS:\n\n")
          print(TABLE)
          result[[z]]$var.components <-TABLE
          
          if (Vg<0) Vg <- 0
          if (Vs<0) Vs <- 0
          if (Vge<0) Vge <- 0
          if (Vse<0) Vse <- 0
          
          #---- Genetic Variance components ----#
          if (cross) {F<-0
          } else {F<-1}
          
          VA <- (4/(1+F))*Vg
          VD <- (4/(1+F)^2)*Vs
          if (VD < 0) VD <- 0
          
          VAE <- (4/(1+F))*Vge
          VDE <- (4/(1+F)^2)*Vse
          if (VDE < 0) VDE <- 0
          
          VE <- EMS
          VP <- VA + VD + VAE + VDE+ VE
          h2B <- (VA + VD) / VP               # individual based
          h2N <- VA / VP                 	# individual based
          Dominance.ratio <- sqrt(2*VD/VA)   
          
          VA_p<-formatNumericValue(VA)
          VAE_p<-formatNumericValue(VAE)
          VD_p<-formatNumericValue(VD)
          VDE_p<-formatNumericValue(VDE)
          h2N_p<-formatNumericValue(h2N)
          h2B_p<-formatNumericValue(h2B)
          Dominance.ratio_p<-formatNumericValue(Dominance.ratio)
          
          Estimate <- rbind(VA_p, VAE_p,  VD_p, VDE_p, h2N_p, h2B_p, Dominance.ratio_p)
          with.colheader<-format(rbind("Estimate", Estimate), justify="right")
          colnames(with.colheader) <- c("")
          rownames(with.colheader) <- c("", " VA", " VAxE", " VD", " VDxE", " h2-narrow sense", " H2-broad sense", " Dominance Ratio")
          TABLE2 <- as.table(with.colheader)
          cat("\n\nESTIMATES OF GENETIC VARIANCE COMPONENTS:\n")
          print(TABLE2)
          result[[z]]$genvar.components <-TABLE2
        } else {
          cat("\n",anovaRemark)
        }
      } else {anovaRemark <- "ERROR: Too many missing values. Cannot perform the analysis." 
              cat("\n",anovaRemark)
      }
      
      cat("\n")
      cat("\n==============================================================\n")
    }## end of loop (z)
    detach("package:doBy")
    return(list(output = result))
  }

