#----------------------------------------------------------------
# Half-sib mating, design NC II - Multi-environment                       
# From an F2 population m males and f females are      
# randomly selected and each male is crossed to each   
# female.                                              
# Estimates genetic variance components                
#                                                     
# Script Created by: Violeta Bartolome   08.2011
# Script Modified by: Nellwyn M. Levita  10.17.2011
#----------------------------------------------------------------

nc2TestME <-
function(design = c("CRD", "RCB", "Alpha", "RowColumn"), data, respvar, female, male, rep=NULL, block=NULL, row=NULL, column=NULL, inbred=TRUE, individual=NULL, environment) {
	
  options(show.signif.stars=FALSE)
  data <- eval(parse(text = data))
  library(lme4)
	
  # --- trim the strings --- #
	respvar <- trim.strings(respvar)
	female <- trim.strings(female)
	male <- trim.strings(male)
  if (!is.null(block)) {block <- trim.strings(block) }
  if (!is.null(rep)) {rep <- trim.strings(rep) }
  if (!is.null(row)) {row <- trim.strings(row) }
  if (!is.null(column)) {column <- trim.strings(column) }
  if (!is.null(individual)) {individual <- trim.strings(individual) }
	environment <-trim.strings(environment)
	
	# --- create titles --- #
  if (design == "CRD") { designName<-"CRD"}
  if (design == "RCB") { designName<-"RCB"}
  if (design == "Alpha") { designName<-"ALPHA-LATTICE"}
  if (design == "RowColumn") { designName<-"ROW-COLUMN"}
  
	if (inbred) {parentsType<-"INBRED"
	} else {parentsType<-"CROSS"}
	cat("\nMULTIPLE ENVIRONMENT ANALYSIS\n")
	cat("\nDESIGN: NORTH CAROLINA EXPERIMENT II IN ",designName, " (", parentsType, ")\n", sep="")
	
  result <- list()
	for (i in (1:length(respvar))) {
		result[[i]] <- list()
		temp.data <- data[(is.na(data[,match(respvar[i], names(data))]) == FALSE),]
    
		cat("\n-----------------------------")
		cat("\nRESPONSE VARIABLE: ", respvar[i], "\n", sep="")
		cat("-----------------------------\n")
    
		responseRate<-(nrow(temp.data)/nrow(data))
		
		if (responseRate < 0.80) {
		  cat("\nToo many missing observations. Cannot proceed with the analysis.\n\n")
		  next
		} else {
		  # --- define factors and get number of levels --- #
		  temp.data[,match(female, names(temp.data))] <- factor(trim.strings(temp.data[,match(female, names(temp.data))]))
		  temp.data[,match(male, names(temp.data))] <- factor(trim.strings(temp.data[,match(male, names(temp.data))]))
		  temp.data[,match(environment, names(temp.data))] <- factor(trim.strings(temp.data[,match(environment, names(temp.data))]))
		  
		  f<-nlevels(temp.data[,match(female, names(temp.data))])
		  m<-nlevels(temp.data[,match(male, names(temp.data))])
		  e<-nlevels(temp.data[,match(environment, names(temp.data))])
		  
		  # --- compute for harmonic mean --- #
		  lengthPerCross<-tapply(temp.data[,respvar[i]], temp.data[,c(female, male, environment)], length)
		  repHarmonicMean<-1/mean(1/lengthPerCross, na.rm=TRUE)
		  
		  if (design == "CRD") {
		    nlevelsRep<-max(lengthPerCross, na.rm=TRUE)
		  }
		  if (design == "RCB") {
		    temp.data[,match(block, names(temp.data))] <- factor(trim.strings(temp.data[,match(block, names(temp.data))]))
		    levelsRep <- levels(temp.data[,match(block, names(temp.data))])
		    levelsEnv <- levels(temp.data[,match(environment, names(temp.data))])
		    nlevelsRep<-nlevels(temp.data[,match(block, names(temp.data))])
		  }
		  if (design == "Alpha") {
		    temp.data[,match(rep, names(temp.data))] <- factor(trim.strings(temp.data[,match(rep, names(temp.data))]))
		    temp.data[,match(block, names(temp.data))] <- factor(trim.strings(temp.data[,match(block, names(temp.data))]))
		    nlevelsRep<-nlevels(temp.data[,match(rep, names(temp.data))])
		  }
		  if (design == "RowColumn") {
		    temp.data[,match(rep, names(temp.data))] <- factor(trim.strings(temp.data[,match(rep, names(temp.data))]))
		    temp.data[,match(row, names(temp.data))] <- factor(trim.strings(temp.data[,match(row, names(temp.data))]))
		    temp.data[,match(column, names(temp.data))] <- factor(trim.strings(temp.data[,match(column, names(temp.data))]))
		    nlevelsRep<-nlevels(temp.data[,match(rep, names(temp.data))])
		  }
		  
		  nBalance<-f*m*e*nlevelsRep
		  
		  # --- data summary --- #
		  funcTrialSum <- class.information2(names(temp.data),temp.data)
		  cat("\nDATA SUMMARY: ","\n\n", sep="")
		  print(funcTrialSum)
		  cat("\n Number of observations read: ",nrow(data), sep="")
		  cat("\n Number of observations used: ",nrow(temp.data), sep="")
		  missingObs<-nBalance-nrow(temp.data)
		  
		  # --- if design is CRD or RCB, check if raw data is balanced. If not, generate estimates for missing values for ANOVA--- #
		  if (design == "CRD" || design == "RCB") {
		    cat("\n\n\nANOVA TABLE:\n\n")
		    if ((nrow(temp.data)/nBalance) >= 0.90) {
		      if (nrow(temp.data) == nBalance) {
		        anovaRemark <- "REMARK: Raw dataset is balanced."
		        dataForAnova<-temp.data  
		      } else {
		        
		        #for CRD, no estimation of missing values
		        if (design == "CRD") {
		          dataForAnova <- temp.data
		          anovaRemark <- "REMARK: Raw dataset is unbalanced."
		        }
		        
		        #for RCB, estimate missing values, if there are any
		        if (design == "RCB") {
		          
		          # --- estimate missing values per environment --- #
		          dataForAnova<-NULL
		          for (x in (1:e)) {
		            tempSplit<-temp.data[temp.data[,environment]==levels(temp.data[,match(environment, names(temp.data))])[x],]
		            tempDataForAnova<-tempSplit[,c(male, female, block, respvar[i])]
		            balancedData<-generateBalancedData(design="FACTORIAL", data=tempDataForAnova, respvar[i], male, female, block)
		            tempDataForAnova<-estimateMissingData(design="RCB", data=balancedData, respvar[i], male, female, block)
		            tempDataForAnova<-tempDataForAnova[,c(male, female, block, respvar[i])]
		            tempDataForAnova$EnvIndex<-levels(temp.data[,match(environment, names(temp.data))])[x]
		            dataForAnova<-rbind(dataForAnova,tempDataForAnova)
		          }
		          colnames(dataForAnova)[match("EnvIndex",names(dataForAnova))]<-environment
		          dataForAnova[,match(environment, names(dataForAnova))] <- factor(dataForAnova[,match(environment, names(dataForAnova))])
		          anovaRemark <- "REMARK: Raw data and estimates of the missing values are used."
		        }
		      }
		        
	        # --- ANOVA for NC2 experiment --- #
	        if (design == "CRD") {
	          myformula <- paste(respvar[i], " ~ ", environment, " * ", male, "*", female, sep = "")
	          anovaFactorial<-summary(aov(formula(myformula), data=dataForAnova))
	          
	          #rerun aov using temp.data to get the original df's
	          anovaFactorial.temp<-summary(aov(formula(myformula), data=temp.data))
	          anovaFactorial<-adjustAnovaDf(anovaFactorial, anovaFactorial.temp[[1]]$"Df")
	        }
	        if (design == "RCB") {
	          myformula <- paste(respvar[i], " ~ ", environment, ":", block, " + ", male, "*", female, "*", environment, sep = "")
	          anovaFactorial<-summary(aov(formula(myformula), data=dataForAnova))
	          
	          #rerun aov using temp.data to get the original df's
	          anovaFactorial.temp<-summary(aov(formula(myformula), data=temp.data))
	          anovaFactorial.temp[[1]]$"Df"[length(anovaFactorial.temp[[1]]$"Df")]<-anovaFactorial[[1]]$"Df"[length(anovaFactorial[[1]]$"Df")]-missingObs
	          anovaFactorial<-adjustAnovaDf(anovaFactorial, anovaFactorial.temp[[1]]$"Df")
	          
	          #rearrange the rows of anovaFactorial
	          index<-match(paste(environment, ":", block, sep=""), trim.strings(rownames(anovaFactorial)))
	          indexEnv<-match(paste(environment), trim.strings(rownames(anovaFactorial)))
	          anovaFactorial <- rbind(anovaFactorial[c(indexEnv,index),], anovaFactorial[-I(match(c(indexEnv, index), 1:nrow(anovaFactorial))),])
	          
	          #recompute f value and pvalue of environment
	          anovaFactorial[1,"F value"] <- anovaFactorial[1, "Mean Sq"]/anovaFactorial[2, "Mean Sq"]
	          anovaFactorial[1,"Pr(>F)"] <-  pf(anovaFactorial[1,"F value"], anovaFactorial[1,"Df"], anovaFactorial[2,"Df"], lower.tail = FALSE)
	        }
		        
	        anovaFormat<-formatAnovaTable(anovaFactorial)
	        print(anovaFormat)
	        cat("-------\n")
	        cat(anovaRemark)
	        result[[i]]$nc2.anova <- anovaFormat
		        
		    } else {anovaRemark <- "ERROR: Too many missing values. Cannot perform ANOVA." 
		            cat(anovaRemark)
		    }
		  }
		  
		  # --- LMER for the design --- #
		  if (design == "CRD") {myformula1 <- paste(respvar[i], " ~ 1 + (1|", environment, ") + (1|", male, ") + (1|", female, ") + (1|", male, ":", female, ") + (1|", environment, ":", male, ") + (1|", environment, ":", female, ") + (1|", environment, ":", male, ":", female,")", sep = "") }
		  if (design == "RCB") {myformula1 <- paste(respvar[i], " ~ 1 + (1|", environment, ") + (1|", environment, ":", block, ") + (1|", male, ") + (1|", female, ") + (1|", male, ":", female, ") + (1|", environment, ":", male, ") + (1|", environment, ":", female, ") + (1|", environment, ":", male, ":", female,")", sep = "") }		
		  if (design == "Alpha") {myformula1 <- paste(respvar[i], " ~ 1 + (1|", environment, ") + (1|", environment, ":", rep, ") + (1|", environment, ":", rep, ":", block, ") + (1|", male, ") + (1|", female, ") + (1|", male, ":", female, ") + (1|", environment, ":", male, ") + (1|", environment, ":", female, ") + (1|", environment, ":", male, ":", female,")", sep = "") }
		  if (design == "RowColumn") {myformula1 <- paste(respvar[i], " ~ 1 + (1|", environment, ") + (1|", environment, ":", rep, ") + (1|", environment, ":", rep, ":", row, ") + (1|", environment, ":", rep, ":", column, ") + (1|", male, ") + (1|", female, ") + (1|", male, ":", female, ") + (1|", environment, ":", male, ") + (1|", environment, ":", female, ") + (1|", environment, ":", male, ":", female,")", sep = "") }
		  
		  model <- lmer(formula(myformula1), data = temp.data)
		  result[[i]]$lmer.result <- summary(model)
		  
		  # --- edit format of lmer output before printing --- #
		  remat<-summary(model)@REmat
		  Groups<-remat[,1]
		  Variance<-formatC(as.numeric(remat[,3]), format="f")
		  Std.Deviation<-formatC(as.numeric(remat[,4]), format="f")
		  Variance2<-format(rbind("Variance", cbind(Variance)), justify="right")
		  Std.Deviation2<-format(rbind("Std. Deviation", cbind(Std.Deviation)), justify="right")
		  Groups2<-format(rbind("Groups",cbind(Groups)), justify="left")
		  rematNew<-noquote(cbind(Groups2, Variance2, Std.Deviation2))
		  colnames(rematNew)<-c("", "", "")
		  rownames(rematNew)<-rep("",nrow(rematNew))
		  cat("\n\n\nLINEAR MIXED MODEL FIT BY RESTRICTED MAXIMUM LIKELIHOOD:\n\n")
		  cat(" Formula: ", myformula1,"\n\n")
		  print(summary(model)@AICtab) 
		  cat("\n Fixed Effects:\n")
		  print(round(summary(model)@coefs, digits=4))
		  cat("\n Random Effects:")
		  print(rematNew)
		  
		  #--- Estimates of variance components ---#
		  varcomp <- summary(model)@REmat
		  Ve <- as.numeric(varcomp[varcomp[,1] == "Residual", "Variance"])
		  Vm_f <- as.numeric(varcomp[varcomp[,1] == paste(male,":",female, sep=""), "Variance"])
		  Vf <- as.numeric(varcomp[varcomp[,1] == female, "Variance"])
		  Vm <- as.numeric(varcomp[varcomp[,1] == male, "Variance"])
		  Vem_f <- as.numeric(varcomp[varcomp[,1] == paste(environment,":",male,":",female, sep=""), "Variance"])
		  Vef <- as.numeric(varcomp[varcomp[,1] == paste(environment,":",female, sep=""), "Variance"])
		  Vem <- as.numeric(varcomp[varcomp[,1] == paste(environment,":",male, sep=""), "Variance"])
		  
		  N <- NROW(temp.data)
		  
		  #--- Genetic Variance Components ---# 
		  
		  if (inbred) F<-1
		  else F<-0
		  
		  VA <- (2/(1+F))*(Vm+Vf)
		  VD <- (4/(1+F)^2)*Vm_f
		  VAE <- (2/(1+F))*(Vem+Vef)
		  VDE <- (4/(1+F)^2)*Vem_f
		  if (VD < 0 || VD < 1e-10) VD <- 0
		  if (VA < 0 || VA < 1e-10) VA <- 0
		  if (VAE < 0 || VAE < 1e-10) VAE <- 0
		  if (VDE < 0 || VDE < 1e-10) VDE <- 0
		  VE <- Ve
		  VP <- VA + VD + VAE + VDE + VE
		  h2B <- (VA + VD) / VP                 # individual based
		  h2N <- VA / VP                        # individual based
		  Dominance.ratio <- sqrt(2*VD/VA) 
		  
		  VA_p<-formatNumericValue(VA)
		  VAE_p<-formatNumericValue(VAE)
		  VD_p<-formatNumericValue(VD)
		  VDE_p<-formatNumericValue(VDE)
		  h2N_p<-formatNumericValue(h2N)
		  h2B_p<-formatNumericValue(h2B)
		  Dominance.ratio_p<-formatNumericValue(Dominance.ratio)
		  
		  Estimate <- rbind(VA_p, VAE_p,  VD_p, VDE_p, h2N_p, h2B_p, Dominance.ratio_p)
		  with.colheader<-format(rbind("Estimate", Estimate), justify="right")
		  colnames(with.colheader) <- c("")
		  rownames(with.colheader) <- c("", " VA", " VAxE", " VD", " VDxE", " h2-narrow sense", " H2-broad sense", " Dominance Ratio")
		  TABLE <- as.table(with.colheader)
		  cat("\n\nESTIMATES OF GENETIC VARIANCE COMPONENTS:\n")
		  print(TABLE)
		  result[[i]]$genvar.components <- TABLE
		  
		  #--- Estimates of heritability values ---#
		  r<-repHarmonicMean
		  
		  #--- Family Selection ---#
		  
		  H2fm <- Vm/(Vm + Vm_f/f + Vem_f/(f*e) +  Ve/(r*e*f))
		  H2ff <- Vf/(Vf + Vm_f/m + Vem_f/(m*e) +  Ve/(r*e*m))
		  H2ffs <- (f*Vm + m*Vf + Vm_f)/(f*Vm + m*Vf + Vm_f + f*Vem/e + m*Vef/e + Ve/(r*e))
		  
		  #--- For individual selection ---#
		  
		  h2m <- (4/(1+F))*Vm/(Vm + Vm_f + Vem  + Vem_f + Ve)
		  H2m <- ((4/(1+F))*Vm + (4/(1+F)^2)*Vm_f)/(Vm + Vm_f + Vem  + Vem_f + Ve)
		  
		  h2f <- (4/(1+F))*Vf/(Vf + Vm_f + Vef  + Vem_f + Ve)
		  H2f <- ((4/(1+F))*Vf + (4/(1+F)^2)*Vm_f)/(Vf + Vm_f + Vef  + Vem_f + Ve)
		  
		  h2fs <- (2/(1+F))*(Vm+Vf)/(Vm + Vf + Vm_f + Vem + Vef  + Vem_f + Ve)
		  H2fs <- ((2/(1+F))*(Vm+Vf) + (4/(1+F)^2)*Vm_f)/(Vm + Vf + Vm_f + Vem + Vef  + Vem_f + Ve)
		  
		  rowMale2<-paste("",male)
		  rowFemale2<-paste("",female)
		  family <- round(rbind(H2fm, H2ff, H2ffs), digits=2)
		  narrowsense <- round(rbind(h2m, h2f, h2fs), digits=2)
		  broadsense <- round(rbind(H2m, H2f, H2fs), digits=2)
		  
		  TABLE2 <- as.table(cbind(family, narrowsense, broadsense))
		  colnames(TABLE2) <- c("Family Selection", "Narrow Sense", "Broad sense")
		  rownames(TABLE2) <- c(rowMale2, rowFemale2, " Full-sib")
		  TABLE2_final <- as.table(TABLE2)
		  result[[i]]$heritability <- TABLE2_final
		  #cat("\n\nESTIMATES OF HERITABILITY:\n\n")
		  #print(TABLE2_final) 
		  cat("\n")
		}
	}## end of loop (i)
  cat("\n==============================================================\n")
	detach("package:lme4")
	return(list(output = result))
}

