#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
#     CLUSTER ANALYSIS FUNCTION (AGGLOMERATIVE) 09.25.2012 Modified: 10.08.13                      								     			     			                                                                    #
#     ClusterAgglo <- function(data, var, idVar, binVar, factorVar, stand= TRUE, distance , clusmethod, distMatrix, clusterMem, descriptiveStat, dendrogram, clusterBox, clusterNum, saveMem, outputPath) #
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#

ClusterAgglo <- function(data, var = NULL, idVar = NULL, binVar = NULL, factorVar = NULL, stand= TRUE, 
                            distance = c("Euclidean", "Maximum", "Manhattan", "Minkowski", "Canberra", "Binary", "Simple Matching", "Jaccard", "Dice", "Gower"), 
                            clusmethod = c("Single", "Complete", "Average", "Ward", "Centroid"),distMatrix = FALSE, clusterMem = TRUE, 
                            descriptiveStat = TRUE, dendrogram = TRUE, clusterBox = TRUE, clusterNum=2, saveMem = TRUE, outputPath = NULL)
UseMethod("ClusterAgglo")  
  
ClusterAgglo.default <- function(data, var = NULL, idVar = NULL, binVar = NULL, factorVar = NULL, stand= TRUE, 
                              distance = c("Euclidean", "Maximum", "Manhattan", "Minkowski", "Canberra", "Binary", "Simple Matching", "Jaccard", "Dice", "Gower"), 
                              clusmethod = c("Single", "Complete", "Average", "Ward", "Centroid"),distMatrix = FALSE, clusterMem = TRUE, 
                              descriptiveStat = TRUE, dendrogram = TRUE, clusterBox = TRUE, clusterNum=2, saveMem = TRUE, outputPath = NULL)
  
  {
  
  if (is.character(data)) { 
    nameData <- data
    if (!exists(nameData)) { stop(paste("The object '", nameData,"' does not exists.", sep = "")) }
    tempData <- eval(parse(text = data)) 
  }else{
    if (is.data.frame(data)) { 
      nameData <- paste(deparse(substitute(data)))  
      tempData <- data	
    } else { stop ("The argument should either be a data frame or a character string indicating the name of the data frame.") }
  } 
  tempData <- na.omit(tempData)
  if (!is.data.frame(tempData)) { stop("The object should be of type data frame.") }
  
  if (!is.null(var))     { 
    if (!is.character(var)) 	{ stop(paste("The object 'var' should be a character vector.", sep = "")) }  
    if (any(is.na(match(var, names(tempData))))) { stop("At least one item in the character vector 'var' does not match any variable name in the dataset.") }
    tempVar <- tempData[var]  
  }
  
  if (!is.null(idVar))   	{ 
    if (any(is.na(match(idVar, names(tempData))))) { stop("At least one item in the character vector 'idVAr' does not match any variable name in the dataset.") }
    tempGrp <- tempData[idVar]
    for (i in (1:ncol(tempGrp))) { tempGrp[,i] <- factor(tempGrp[,i]) }
  } else { tempGrp <- rep(1, each = nrow(tempData)) }
  
  if (!is.null(binVar))     { 
    if (any(is.na(match(binVar, names(tempData))))) { stop("At least one item in the character vector 'binVar' does not match any variable name in the dataset.") }
    tempBinVar <- tempData[binVar]
    for (i in (1:ncol(tempBinVar))) { tempBinVar[,i] <- factor(tempBinVar[,i]) }
    if(nlevels(tempBinVar[,i] != 2)) { stop("The variable is not binary") }
  } else { tempBinVar <- rep(1, each = nrow(tempData)) }
  
  if (!is.null(factorVar))     { 
    if (any(is.na(match(factorVar, names(tempData))))) { stop("At least one item in the character vector 'binVar' does not match any variable name in the dataset.") }
    tempfactorVar <- tempData[factorVar]
    for (i in (1:ncol(tempfactorVar))) { tempfactorVar[,i] <- factor(tempfactorVar[,i]) }
  } else { tempfactorVar <- rep(1, each = nrow(tempData)) }
  
    distance <- match.arg(distance)
    clusmethod <- match.arg(clusmethod)
  options(width = 6000, digits =3)
  
  # ------------------first condition var not null---------------------- 
  
  if(!is.null(var) & (is.null(binVar) & is.null(factorVar))){
    if(stand){
      x <- tempData[,var]
      z <- var
      a <- data.Normalization(x, type = "n1")
      adist <- dist(a, method = tolower(distance))
    }else adist <- dist(x, method = tolower(distance))
  }
  
  #---------------------------------------------------------------------  
  #------------------second condition binVar not null-------------------  
  
  if(!is.null(binVar) & (is.null(var) & is.null(factorVar))){
    x<- tempData[,binVar]
    z <- binVar
    if(distance == "Simple Matching"){
      adist <- dist.binary(x, method = 2)
    }
    if(distance == "Jaccard"){
      adist <- dist(x, method = "binary")
    }
    if(distance == "Dice"){
      adist <- dist.binary(x, method = 5)
    }   
  }

  #--------------------------------------------------------------------  
  #------------------third condition all not null----------------------
  
  if((!is.null(var) & !is.null(binVar)) & is.null(factorVar)){
    x<- tempData[c(var,binVar)]
    z<- c(var,binVar)
    adist <- daisy(x, metric = tolower(distance))
  }   
  if((!is.null(var) & !is.null(factorVar)) & is.null(binVar)){
    x<- tempData[c(var,factorVar)]
    z<- c(var, factorVar)
    adist <- daisy(x, metric = tolower(distance))
  }                  
  if((!is.null(binVar) & !is.null(factorVar)) & is.null(var)){
    x<-tempData[c(binVar,factorVar)]
    z<- c(binVar, factorVar)
    adist <- daisy(x, metric = tolower(distance))
  }    
  if((!is.null(var) & !is.null(binVar)) & !is.null(factorVar)){
    x<- tempData[c(var,binVar, factorVar)]
    z<- c(var,binVar,factorVar)
    adist <- daisy(x, metric = tolower(distance))
  }   

  
  
  cat("\nAGGLOMERATIVE CLUSTER ANALYSIS\n")
  
  if (distMatrix){ 
    cat("\nDISTANCE MATRIX\n") 
    print(adist)
  }
  
  amethod <- hclust(adist, method = tolower(clusmethod)) 
  Membership <- cutree(amethod, k = as.numeric(clusterNum))
  memData <- data.frame(Membership)
  
  if (clusterMem){    
    cat("\nCLUSTER MEMBERSHIP SUMMARY\n")        
    #     if(nlevels(tempData[idVar])!= nrow(tempData)){ stop("The object 'idVar' should be unique.") }
    #     else{
    #       memSummary <- cbind(tempData[idVar], tempData[,var], memData)
    #       printDataFrame(memSummary)
    #     }  
    
    memSummary <- cbind(tempData[idVar], x, memData)
    printDataFrame(memSummary)
    
    cat("\nNumber of members in each cluster\n")
    a<- data.frame(table(Membership))
    colnames(a)<- "Cluster"
    colnames(a)[2] <-"Size"
    printDataFrame(a)
  }
  
  if (!is.null(outputPath)) {
    if (dendrogram){
      png(paste(outputPath, "AggloGraph.png", sep = ""))
      amethod$labels <- tempData[,idVar]
      dendro <- as.dendrogram(amethod)
      plot(amethod)
      plot(dendro, horiz = FALSE, center = TRUE,
           nodePar = list(lab.cex = 0.6, lab.col = "forest green", pch = NA),
           main = "Dendrogram using Agglomerative Clustering Method")
      
      if(clusterBox){
        rect.hclust(tree=amethod, k= as.numeric(clusterNum), border=c("red", "blue", "green", "purple"))
      }
      dev.off()
    }
    if (saveMem){
      write.csv(data.frame(Rownames= rownames(memSummary), memSummary), row.names = FALSE, file=paste(outputPath, "MembershipSummary.csv", sep = ""))
    }
  }
  
  if (descriptiveStat){
    cat("\n")
    cat("\n")
    Cluster <- Membership
    all <- cbind(x, Cluster )
    DescriptiveStatistics(data = all, var = var, grp = "Cluster", statistics = c("mean", "sd", "min", "max") )
  } 
  
  Copcorr <- cophenetic(amethod)
  cop <- cor(adist, Copcorr)  
  cat("\nCOPHENETIC CORRELATION COEFFICIENT = ", cop, "\t\n")
  
  return(list(ClusterMethod = amethod, Membership = memSummary, DistMatrix = adist))
}
#### end statement ClusterAgglo####
