##########################################################
#compareGenotypes - function for comparing genotypes
#
# REQUIRED input: 
# crossData - R object of class cross
# outputPath - path to where created graph will be saved
# pvalCutOff - borderline probability value for Test of Segregation Distortion, below which the markers will be deleted
#
# OUTPUT: a list with the following elements:
#  crossObj - an R object of class "cross"
#  simGenoOut - table of pairs of individuals with similar genotype data
#  graphName - name of .png file of histogram of identical genotypes
##########################################################


compareGenotypes <- function(crossData, outputPath, cutoffP) {
  cg <- comparegeno(crossData)
  #save to file
  graphFilename = paste(outputPath,"compareGeno.png", sep = "")
  png(graphFilename)
  hist(cg, breaks = 200, xlab = "Proportion of identical genotypes", main = "")
  rug(cg)
  dev.off()
#   simOut1 <- which(cg > cutoffP, arr.ind = TRUE)
  simOut <- which(cg > cutoffP, arr.ind = TRUE)  #show pairs of individuals with very similar genotype data
  
  # delete one of the similar genotypes
  if (!is.null(dim(simOut))) { nRows <- dim(simOut)[1]
  } else if (length(simOut) == 2) { nRows = 1
  } else nRows = 0
  startRow = 1

  while (startRow <= nRows) {
    skip = FALSE
    for (i in startRow:nRows) {
      for (j in 1:nRows) {
        if (simOut[i,2] == simOut[j,1])
          if (simOut[i,1] == simOut[j,2]) {
            simOut = simOut[-j,]
#             nRows = dim(simOut)[1]
            if (!is.null(dim(simOut))) { nRows <- dim(simOut)[1]
            } else if (length(simOut) == 2) { nRows = 1
            } else nRows = 0
            startRow = i + 1
            skip =TRUE
            break
          }     
      } 
      if (skip) break
    }
  }
  
  if (!is.null(dim(simOut))) {
    if (dim(simOut)[1] > 0 && dim(simOut)[2] > 0) {
      crossDataNS <- crossData[,-simOut[,2]]
    } else crossDataNS <- crossData
  } else if (length(simOut) == 2) { crossDataNS <- crossData[,-simOut[2]]
  } else crossDataNS <- crossData

  return(list(crossObj = crossDataNS, simGenoOut = simOut, graphName = graphFilename))
}