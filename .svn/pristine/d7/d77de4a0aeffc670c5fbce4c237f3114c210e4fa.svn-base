# -------------------------------------------------------------------------------
# R-CropStat Beta Version: Functions for ANALYZE - ANALYSIS OF VARIANCE SUBMENU
# -------------------------------------------------------------------------------
# combAOVTest: Functions for performing ANOVA
# Created by: Alaine A. Gulles for International Rice Research Institute
# Modified by: Alaine A. Gulles 01.14.2013
# Note: Include remarks when data is unbalanced, when no balanced data can be generated
# -------------------------------------------------------------------------------

combAOVTest <- function(data, design, respvar, factor1, factor2 = NULL, factor3 = NULL, 
                        factor4 = NULL, rep1 = NULL, rep2 = NULL, set, descriptive = FALSE, 
                        normality = FALSE, homogeneity = FALSE, pwTest = NULL, pwVar = NULL, 
                        contrastOption = NULL, sig = 0.05, outputPath = NULL) UseMethod("combAOVTest")

combAOVTest.default <- function(data, design, respvar, factor1, factor2 = NULL, factor3 = NULL, 
                        factor4 = NULL, rep1 = NULL, rep2 = NULL, set, descriptive = FALSE, 
                        normality = FALSE, homogeneity = FALSE, pwTest = NULL, pwVar = NULL, 
                        contrastOption = NULL, sig = 0.05, outputPath = NULL) {

     if (is.character(data)) { 
          nameData <- data
          data <- eval(parse(text = data))
     } else { nameData <- paste(deparse(substitute(data))) }
     
     if (!is.data.frame(data)) { stop("The object 'data' should be a data frame.") }
     
     availableDesign <- c("CRD", "RCBD", "LSD", "SplitCRD", "SplitRCBD", "SplitLSD", "Strip", "Split2CRD", "Split2RCBD", "Split2LSD", "Strip-Split",     "Split3CRD", "Split3RCBD", "Split3LSD", "Strip-Split2")
     if(is.na(match(design, availableDesign))) {
          stop("Design must be one of the following:\n'CRD', 'RCBD', 'LSD',\n'SplitCRD', 'SplitRCBD', 'SplitLSD','Strip',\n'Split2CRD', 'Split2RCBD', 'Split2LSD', 'Strip-Split',\n'Split3CRD', 'Split3RCBD', 'Split3LSD', 'Strip-Split2'")
     }
     
     designChoice <- match(design, availableDesign) ## design code
     designTitle <- c("Completely Randomized Design",
                      "Randomized Complete Block Design",
                      "Latin Square Design", 
                      "Split Plot in Completely Randomized Design", 
                      "Split Plot in Randomized Complete Block Design", 
                      "Split Plot in Latin Square Design", 
                      "Strip Plot Design", 
                      "Split-Split Plot in Completely Randomized Design", 
                      "Split-Split Plot in Randomized Complete Block Design", 
                      "Split-Split Plot in Latin Square Design",  
                      "Strip-Split Plot Design", 
                      "Split-Split-Split Plot in Completely Randomized Design", 
                      "Split-Split-Split Plot in Randomized Complete Block Design", 
                      "Split-Split-Split Plot in Latin Square Design", 
                      "Strip-Split-Split Plot Design")
     
     # determine the right handside of the model
     switch(designChoice,
          { modelRHS <- paste(set, paste(factor1, collapse = "*", sep = ""), paste(set , paste("(",paste(factor1, collapse = "*", sep = ""),")", sep = ""), sep = ":"), sep = " + "); modelRHS2 <- modelRHS },
          { modelRHS <- paste(set, paste(set, rep1, sep = ":"), paste(factor1, collapse = "*", sep = ""), paste(set, paste("(",paste(factor1, collapse = "*", sep = ""),")", sep = ""), sep = ":"), sep = " + "); modelRHS2 <- modelRHS},
          { modelRHS <- paste(set, paste(set, rep1, sep = ":"), paste(set, rep2, sep =":"), paste(factor1, collapse = "*", sep = ""), paste(set , paste("(",paste(factor1, collapse = "*", sep = ""),")", sep = ""), sep = ":"), sep = " + "); modelRHS2 <- modelRHS },
          { modelRHS <- paste(set, paste(c(factor1, factor2), collapse = "*", sep = ""), paste(set, paste("(",paste(c(factor1, factor2), collapse = "*", sep = ""),")", sep = ""), sep = ":"), paste("Error((", paste(c(set, rep1, factor1), collapse = ":", sep = ""),")/", rep1,")", sep = ""),sep = " + ");
            modelRHS2 <- paste(set, paste(c(factor1, factor2), collapse = "*", sep = ""), paste(set, paste("(",paste(c(factor1, factor2), collapse = "*", sep = ""),")", sep = ""), sep = ":"), sep = " + ") },
          { modelRHS <- paste(set, rep1, paste(c(factor1, factor2), collapse = "*", sep = ""), paste(set, paste("(",paste(c(factor1, factor2), collapse = "*", sep = ""),")", sep = ""), sep = ":"), paste("Error((", paste(c(set, rep1, factor1), collapse = ":", sep = ""),")/(", paste(factor1, collapse = "*", sep = ""),"))", sep = ""), sep = " + ");
            modelRHS2 <- paste(set, rep1, paste(c(factor1, factor2), collapse = "*", sep = ""), paste(set, paste("(",paste(c(factor1, factor2), collapse = "*", sep = ""),")", sep = ""), sep = ":"), sep = " + ") },
          { modelRHS <- paste(set, rep1, rep2, paste(c(factor1, factor2), collapse = "*", sep = ""), paste(set, paste("(",paste(c(factor1, factor2), collapse = "*", sep = ""),")", sep = ""), sep = ":"), paste("Error((", paste(c(set, rep1, rep2, factor1), collapse = ":", sep = ""),")/(", paste(factor1, collapse = "*", sep = ""),"))", sep = ""), sep = " + ");
            modelRHS2 <- paste(set, rep1, rep2, paste(c(factor1, factor2), collapse = "*", sep = ""), paste(set, paste("(",paste(c(factor1, factor2), collapse = "*", sep = ""),")", sep = ""), sep = ":"), sep = " + ") },
          { modelRHS <- paste(set, rep1, paste(c(factor1, factor2), collapse = "*", sep = ""), paste(set, paste("(",paste(c(factor1, factor2), collapse = "*", sep = ""),")", sep = ""), sep = ":"), paste("Error((", paste(c(set, rep1, factor1), collapse = ":", sep = ""),")/(", paste(factor1, collapse = "*", sep = ""),") + (", paste(c(set, rep1, factor2), collapse = ":", sep = ""),"/", paste(factor2, collapse = "*", sep = ""),"))", sep = ""), sep = " + ");
            modelRHS2 <- paste(set, rep1, paste(c(factor1, factor2), collapse = "*", sep = ""), paste(set, paste("(",paste(c(factor1, factor2), collapse = "*", sep = ""),")", sep = ""), sep = ":"), sep = " + ") },
          { modelRHS <- paste(set, paste(c(factor1, factor2, factor3), collapse = "*", sep = ""), paste(set, paste("(",paste(c(factor1, factor2, factor3), collapse = "*", sep = ""),")", sep = ""), sep = ":"), paste("Error((", paste(c(set, rep1, factor1), collapse = ":", sep = ""),")/(",rep1,") + (", paste(c(set, rep1, factor1, factor2), collapse = ":", sep = ""),"/", paste(factor2, collapse = ":", sep = ""),"))", sep = ""), sep = " + "); 
            modelRHS2 <- paste(set, paste(c(factor1, factor2, factor3), collapse = "*", sep = ""), paste(set, paste("(",paste(c(factor1, factor2, factor3), collapse = "*", sep = ""),")", sep = ""), sep = ":"), sep = " + ") },
          { modelRHS <- paste(set, rep1, paste(c(factor1, factor2, factor3), collapse = "*", sep = ""), paste(set, paste("(",paste(c(factor1, factor2, factor3), collapse = "*", sep = ""),")", sep = ""), sep = ":"), paste("Error((", paste(c(set, rep1, factor1), collapse = ":", sep = ""),")/(", paste(factor1, collapse = "*", sep = ""),") + (", paste(c(set, rep1, factor1, factor2), collapse = ":", sep = ""),"/", paste(factor2, collapse = ":", sep = ""),"))", sep = ""), sep = " + ");
            modelRHS2 <- paste(set, rep1, paste(c(factor1, factor2, factor3), collapse = "*", sep = ""), paste(set, paste("(",paste(c(factor1, factor2, factor3), collapse = "*", sep = ""),")", sep = ""), sep = ":"), sep = " + ") },
          { modelRHS <- paste(set, rep1, rep2, paste(c(factor1, factor2, factor3), collapse = "*", sep = ""), paste(set, paste("(",paste(c(factor1, factor2, factor3), collapse = "*", sep = ""),")", sep = ""), sep = ":"), paste("Error((", paste(c(set, rep1, rep2, factor1), collapse = ":", sep = ""),")/(", paste(factor1, collapse = "*", sep = ""),") + (", paste(c(set, rep1, rep2, factor1, factor2), collapse = ":", sep = ""),"/", paste(factor2, collapse = ":", sep = ""),"))", sep = ""), sep = " + ");
            modelRHS2 <- paste(set, rep1, rep2, paste(c(factor1, factor2, factor3), collapse = "*", sep = ""), paste(set, paste("(",paste(c(factor1, factor2, factor3), collapse = "*", sep = ""),")", sep = ""), sep = ":"), sep = " + ") },
          { modelRHS <- paste(set, rep1, paste(c(factor1, factor2, factor3), collapse = "*", sep = ""), paste(set, paste("(",paste(c(factor1, factor2, factor3), collapse = "*", sep = ""),")", sep = ""), sep = ":"), paste("Error((", paste(c(set, rep1, factor1), collapse = ":", sep = ""),")/(", paste(factor1, collapse = "*", sep = ""),") + (", paste(c(set, rep1, factor2), collapse = ":", sep = ""),"/", paste(factor2, collapse = "*", sep = ""),") + (", paste(c(set, rep1, factor1, factor2), collapse = ":", sep = ""),"/", paste(c(factor1, factor2), collapse = ":", sep = ""),"))", sep = ""), sep = " + ");
            modelRHS2 <- paste(set, rep1, paste(c(factor1, factor2, factor3), collapse = "*", sep = ""), paste(set, paste("(",paste(c(factor1, factor2, factor3), collapse = "*", sep = ""),")", sep = ""), sep = ":"), sep = " + ") },
          { modelRHS <- paste(set, paste(c(factor1, factor2, factor3, factor4), collapse = "*", sep = ""), paste(set , paste("(",paste(c(factor1, factor2, factor3, factor4), collapse = "*", sep = ""),")", sep = ""), sep = ":"), paste("Error((", paste(c(set, rep1, factor1), collapse = ":", sep = ""),")/(",rep1,") + (", paste(c(set, rep1, factor1, factor2), collapse = ":", sep = ""),"/", paste(factor2, collapse = ":", sep = ""),") + (", paste(c(set, rep1, factor1, factor2, factor3), collapse = ":", sep = ""),"/", paste(factor3, collapse = ":", sep = ""),"))", sep = ""), sep = " + ");
            modelRHS2 <- paste(set, paste(c(factor1, factor2, factor3, factor4), collapse = "*", sep = ""), paste(set , paste("(",paste(c(factor1, factor2, factor3, factor4), collapse = "*", sep = ""),")", sep = ""), sep = ":"), sep = " + ") },
          { modelRHS <- paste(set, rep1, paste(c(factor1, factor2, factor3, factor4), collapse = "*", sep = ""), paste(set, paste("(",paste(c(factor1, factor2, factor3, factor4), collapse = "*", sep = ""),")", sep = ""), sep = ":"), paste("Error((", paste(c(set, rep1, factor1), collapse = ":", sep = ""),")/(", paste(factor1, collapse = "*", sep = ""),") + (", paste(c(set, rep1, factor1, factor2), collapse = ":", sep = ""),"/", paste(factor2, collapse = ":", sep = ""),") + (", paste(c(set, rep1, factor1, factor2, factor3), collapse = ":", sep = ""),"/", paste(factor3, collapse = ":", sep = ""),"))", sep = ""), sep = " + ");
            modelRHS2 <- paste(set, rep1, paste(c(factor1, factor2, factor3, factor4), collapse = "*", sep = ""), paste(set, paste("(",paste(c(factor1, factor2, factor3, factor4), collapse = "*", sep = ""),")", sep = ""), sep = ":"), sep = " + ") },
          { modelRHS <- paste(set, rep1, rep2, paste(c(factor1, factor2, factor3, factor4), collapse = "*", sep = ""), paste(set, paste("(",paste(c(factor1, factor2, factor3, factor4), collapse = "*", sep = ""),")", sep = ""), sep = ":"), paste("Error((", paste(c(set, rep1, rep2, factor1), collapse = ":", sep = ""),")/(", paste(factor1, collapse = "*", sep = ""),") + (", paste(c(set, rep1, rep2, factor1, factor2), collapse = ":", sep = ""),"/", paste(factor2, collapse = ":", sep = ""),") + (", paste(c(set, rep1, rep2, factor1, factor2, factor3), sep = ""),"/", paste(factor3, collapse = ":", sep = ""),"))", sep = ""), sep = " + ");
            modelRHS2 <- paste(set, rep1, rep2, paste(c(factor1, factor2, factor3, factor4), collapse = "*", sep = ""), paste(set, paste("(",paste(c(factor1, factor2, factor3, factor4), collapse = "*", sep = ""),")", sep = ""), sep = ":"), sep = " + ") },
          { modelRHS <- paste(set, rep1, paste(c(factor1, factor2, factor3, factor4), collapse = "*", sep = ""), paste(set, paste("(",paste(c(factor1, factor2, factor3, factor4), collapse = "*", sep = ""),")", sep = ""), sep = ":"), paste("Error((", paste(c(set, rep1, factor1), collapse = ":", sep = ""),")/(", paste(factor1, collapse = "*", sep = ""),") + (", paste(c(set, rep1, factor2), collapse = ":", sep = ""),"/", paste(factor2, collapse = "*", sep = ""),") + (", paste(c(set, rep1, factor1, factor2), collapse = ":", sep = ""),"/",paste(c(factor1, factor2), collapse = ":", sep = ""),") + (", paste(c(set, rep1, factor1, factor2, factor3), collapse = ":", sep = ""),"/", paste(factor3, collapse = ":", sep = ""),"))", sep = ""), sep = " + ");
            modelRHS2 <- paste(set, rep1, paste(c(factor1, factor2, factor3, factor4), collapse = "*", sep = ""), paste(set, paste("(",paste(c(factor1, factor2, factor3, factor4), collapse = "*", sep = ""),")", sep = ""), sep = ":"), sep = " + ") }
     )
     
     allFactor <- c(factor1, factor2, factor3, factor4)
     prev.option <- options()$show.signif.stars
     options(show.signif.stars = FALSE, width = 5000)
     options(expressions = 500000)
     tempAnova <- list()
     residNfittedData <- NULL
     pwOption <- list()
     aovresult <- list()
     rvWithSigEffect <- NULL
     
     # define as factors
     for (i in (1:length(allFactor))) { data[,allFactor[i]]     <- factor(data[,allFactor[i]])	 }
     if (!is.null(rep1)) { data[,rep1] <- factor(data[,rep1]) }
     if (!is.null(rep2)) { data[,rep2] <- factor(data[,rep2]) }
     data[,set] <- factor(data[,set])
     
     tempAllData <- data
     tempNewData <- NULL
     cat("Combined Analysis of Variance","\n",designTitle[designChoice],"\n\n", sep = "")
     
     for (i in (1:length(respvar))) {
          width1 <- 37 + nchar(respvar[i])
          cat(paste(rep("=", width1), collapse = ""), "\n")
          cat("ANALYSIS FOR RESPONSE VARIABLE:", respvar[i],"\n")
          cat(paste(rep("=", width1), collapse = ""), "\n\n")
          
          origData <- tempAllData
          
          # include statement to check if the data set is balanced or not
          # if the data set is unbalanced estimate per level of the set variable
          estimateData <- FALSE
          tempData <- tempAllData
          
          # -- PRINTING CLASS LEVEL INFORMATION -- #
          ClassInformation(tempData[, c(set, rep1, rep2, factor1, factor2, factor3, factor4, respvar[i])], respvar = respvar[i])
          cat("\n\n")
          
          # --- PRINTING DESCRIPTIVE STATISTICS --- #     
          if (descriptive) { 
               DescriptiveStatistics(data = tempData, var = respvar[i], grp = NULL, statistics = c("n", "mean", "sd", "min", "max"))
               if (estimateData) { cat("REMARK: Raw data and estimates of the missing values are used.") } 
               cat("\n")
          }
          
          # --- BUILD THE MODEL --- #
          
          modelLHS <- paste(respvar[i], "~")
          mymodel <- paste(modelLHS, modelRHS)
          mymodel2 <- paste(modelLHS, modelRHS2)
          # if (estimateData) { tempresult <- summary(suppressWarnings(aov(formula(mymodel), data = origData)))     }
          result <- suppressWarnings(aov(formula(mymodel), tempData))
          aovresult[[i]] <- result
          
          # if (estimateData) {
          #     if (attr(summary(result), "class")[[1]] == "summary.aovlist") {
          #          tempAnova[[i]] <- summary(result) 
          #          numRow <- nrow(tempAnova[[i]][[length(tempAnova[[i]])]][[1]])
          #          dfError <- tempresult[[length(tempresult)]][[1]][nrow(tempresult[[length(tempresult)]][[1]]),"Df"]
          #          tempAnova[[i]][[length(tempAnova[[i]])]][[1]][numRow,"Df"] <- dfError
          #          tempAnova[[i]][[length(tempAnova[[i]])]][[1]][numRow,"Mean Sq"] <- tempAnova[[i]][[length(tempAnova[[i]])]][[1]][numRow,"Sum Sq"]/dfError
          #          tempAnova[[i]][[length(tempAnova[[i]])]][[1]][1:(numRow - 1),"F value"] <- tempAnova[[i]][[length(tempAnova[[i]])]][[1]][1:(numRow - 1),"Mean Sq"]/tempAnova[[i]][[length(tempAnova[[i]])]][[1]]["Residuals","Mean Sq"]
          #          tempAnova[[i]][[length(tempAnova[[i]])]][[1]][1:(numRow - 1), "Pr(>F)"] <- pf(tempAnova[[i]][[length(tempAnova[[i]])]][[1]][1:(numRow - 1),"F value"], tempAnova[[i]][[length(tempAnova[[i]])]][[1]][1:(numRow - 1),"Df"], dfError, lower.tail = FALSE)
          #     } else {
          #          tempAnova[[i]] <- summary(result)
          #          tempAnova[[i]][[1]]["Df"] <- tempresult[[1]]["Df"]
          #          tempAnova[[i]][[1]]["Mean Sq"] <- tempAnova[[i]][[1]]["Sum Sq"]/tempAnova[[i]][[1]]["Df"]
          #          numEffects <- nrow(tempAnova[[i]][[1]])-1
          #          dfError <- tempAnova[[i]][[1]][nrow(tempAnova[[i]][[1]]),"Df"]
          #          tempAnova[[i]][[1]][1:numEffects, "F value"] <- tempAnova[[i]][[1]][1:numEffects,"Mean Sq"]/tempAnova[[i]][[1]]["Residuals","Mean Sq"]
          #          tempAnova[[i]][[1]][1:numEffects, "Pr(>F)"] <- pf(tempAnova[[i]][[1]][1:numEffects,"F value"], tempAnova[[i]][[1]][1:numEffects,"Df"], dfError, lower.tail = FALSE)
          #     }
          #} else { tempAnova[[i]] <- summary(result) }
          tempAnova[[i]] <- summary(result)
          tempAOVTable <- ConstructAOVTable(tempAnova[[i]])
          
          # rename the anova table
          rownames(tempAOVTable) <- gsub("Error", "Pooled Error",trim.strings(rownames(tempAOVTable)))
          if (!is.null(rep1)) {
               index <- match(paste(c(set, rep1), collapse = ":", sep = ""), trim.strings(rownames(tempAOVTable)))
               if (!is.na(index)) {
                    rownames(tempAOVTable)[index] <- paste(rep1, "within", set)
                    tempAOVTable <- rbind(tempAOVTable[c(1,index),], tempAOVTable[-I(match(c(1, index), 1:nrow(tempAOVTable))),])
               }
               rm(index)
          }

          if (!is.null(rep2)) {
               index <- match(paste(c(set, rep2), collapse = ":", sep = ""), trim.strings(rownames(tempAOVTable)))
               if (!is.na(index)) {
                    rownames(tempAOVTable)[index] <- paste(rep2, "within", set)
                    tempAOVTable <- rbind(tempAOVTable[c(1,index),], tempAOVTable[-I(match(c(1, index), 1:nrow(tempAOVTable))),])
               }
               rm(index)
          }
          
          # -- CREATE THE RESIDUAL DATA AND PREDICTED VALUES -- #
          residNfittedData <- NULL
          residNfittedData <- data.frame(PredictedValues(result))
          if (inherits(result, what = "aovlist")) { residNfittedData <- data.frame(residNfittedData,proj(result)[[length(result)]][,"Residuals"])
          } else { residNfittedData <- data.frame(residNfittedData, residuals(result)) }
          colnames(residNfittedData) <- c(paste(respvar[i],"pred", sep = "_"), paste(respvar[i],"resid", sep = "_"))
          
          # -- CREATE THE DIAGNOSTIC PLOT -- #
          if (!is.null(outputPath)) {
               png(filename = paste(outputPath, design,"DiagPlot_", respvar[i], ".png", sep = ""))
               params <- par(mfrow = c(1,2), bg = "white")
               plot(residNfittedData[,(ncol(residNfittedData)-1)], residNfittedData[,ncol(residNfittedData)], main = paste("Residual vs Fitted:\n", respvar[i], sep = ""), xlab = "Fitted Values", ylab = "Residuals") 
               qqnorm(residNfittedData[,ncol(residNfittedData)])
               qqline(residNfittedData[,ncol(residNfittedData)])
               par(params)
               dev.off()
          }

          # -- PERFORM NORMALITY TEST AND/HOMOGENEITY OF VARIANCES -- #         
          if (homogeneity || normality) {
               assumpData <- data.frame(CombineFactorLevels(data = tempData, concatVar = allFactor, targetName = "factor")["factor"], residNfittedData[ncol(residNfittedData)])
               
               # --- PRINTING RESULTS OF TEST FOR HOMOGENEITY OF VARIANCES --- #
               if (homogeneity) {
                    capture.output(bartlett.result <- HeteroskedasticityTest(data = assumpData, var = paste(names(assumpData)[2]), grp = "factor", method = c("bartlett")))
                    cat("Bartlett's Test for Homogeneity of Variances\n")
                    printDataFrame(bartlett.result[,3:ncol(bartlett.result)])
                    cat("\n")
                    rm(bartlett.result)
               }
               # --- PRINTING RESULT OF SHAPIRO WILK TEST --- #
               if (normality) {
                    if (nrow(assumpData) >= 3 && nrow(assumpData) <= 5000) {
                         NormalityTest(data = assumpData, var = paste(names(assumpData)[2]), grp = NULL, method = c("swilk"))
                         cat("\n")
                    }
               }
               rm(assumpData)
          }
          
          # --- PRINTING OF ANOVA TABLE --- #
          if (is.null(contrastOption)) {
               cat("ANOVA TABLE\nResponse Variable: ", respvar[i], "\n", sep = "")
               printAOVTable(tempAOVTable)
               if (estimateData) { cat("REMARK: Raw data and estimates of the missing values are used.\n") } 
               cat("\n")
          } else { 
               ContrastCompute(data = tempData, aovTable = tempAnova[[i]], mymodel, mymodel2,contrast.option = contrastOption)
               if (estimateData) { cat("REMARK: Raw data and estimates of the missing values are used.\n") } 
               cat("\n")
          }
          
          # --- PRINTING OF SUMMARY STATISTICS --- #
          summaryStat <- NULL
          if (designChoice <= 3) {
               #if (designChoice == 1 && is.list(replications(formula, tempData))) { 
                    summaryTable <- suppressWarnings(model.tables(result, "means", se = FALSE))
               #} else { summaryTable <- suppressWarnings(model.tables(result, "means", se = TRUE)) }
               grandMean <- summaryTable$tables[[1]]
               summaryStat <- rbind(summaryStat, data.frame(((sqrt(tempAnova[[i]][[1]][nrow(tempAnova[[i]][[1]]),3])/grandMean) * 100))) 
               rownames(summaryStat)[nrow(summaryStat)] <- paste("Coef Var", sep = "")
               summaryStat <- t(rbind(summaryStat, grandMean))          	
          } else {
               grandMean <- mean(tempData[, respvar[i]], na.rm = TRUE)
               for (j in (1:length(tempAnova[[i]]))) { 
                    summaryStat <- rbind(summaryStat, data.frame(((sqrt(tempAnova[[i]][[j]][[1]][nrow(tempAnova[[i]][[j]][[1]]),3])/grandMean) * 100))); 
                    rownames(summaryStat)[nrow(summaryStat)] <- paste("Coef Var(",letters[j],")", sep = "")
               }
               summaryStat <- t(rbind(summaryStat, grandMean))
          }
          colnames(summaryStat)[ncol(summaryStat)] <- paste(respvar[i], "Mean")
          cat("Summary Statistics\n")
          printDataFrame(as.data.frame(summaryStat))
          if (estimateData) { cat("REMARK: Raw data and estimates of the missing values are used.\n") } 
          cat("\n")
          
          # if (!estimateData) {
          #      if (designChoice == 1 || designChoice == 2 || designChoice == 3) {
          #           if (!is.null(summaryTable$se)) {
          #                stdErrTable <- data.frame(Effects = names(unlist(summaryTable$se)),StdErr = unlist(summaryTable$se))
          #                rownames(stdErrTable) <- 1:nrow(stdErrTable)
          #                cat("Standard Errors\n")
          #                printDataFrame(stdErrTable)
          #                cat("\n")
          #           }
          #      }
          # }
          
          # --- DETERMINE THE EFFECTS WHICH ARE SIGNIFICANT --- #
          sigEffect <- SignificantEffect(tempAOVTable, alpha = sig)
          if (!is.null(sigEffect)) { 
               sigEffect <- trim.strings(sigEffect)
               rvWithSigEffect <- c(rvWithSigEffect, respvar[i])
          }
          
          # --- PRINT THE TABLE OF MEANS --- #
          if (is.null(sigEffect)) {
               cat("Table of Means\n")
               if (length(allFactor) == 1) {
                    tableMeans <- as.data.frame.table(summaryTable$tables[[length(summaryTable$tables)]])
                    colnames(tableMeans)[ncol(tableMeans)] <- paste(respvar[i]," Means", sep = "")
                    printDataFrame(tableMeans)
                    if (estimateData) { cat("REMARK: Raw data and estimates of the missing values are used.\n") } 
               } else {
                    if (designChoice <= 3) {
                         print(ftable(summaryTable$tables[[length(summaryTable$tables)]]))
                         if (estimateData) { cat("REMARK: Raw data and estimates of the missing values are used.\n") } 
                    } else {
                         factorInOrder <- unlist(lapply(tempData[allFactor], nlevels))[order(unlist(lapply(tempData[allFactor], nlevels)))]
                         tableMeans <-eval(parse(text = paste("ftable(tapply(tempData[,'",respvar[i],"'], list(tempData[,'", paste(names(factorInOrder), collapse = "'],tempData[,'", sep = ""),"']), mean))", sep = "")))
                         names(attr(tableMeans, "row.vars")) <- names(factorInOrder[1:(length(allFactor) - 1)])
                         names(attr(tableMeans, "col.vars")) <- names(factorInOrder[length(allFactor)])
                         print(tableMeans)
                         if (estimateData) { cat("REMARK: Raw data and estimates of the missing values are used.\n") } 
                    }
               }
               cat("\n\n")
          } else {
               if (length(allFactor) > 1) {
                    highestInteraction <- paste(allFactor, collapse = ":", sep = "")
                    if (is.na(match(highestInteraction, sigEffect))) {
                         cat("Table of Means\n")
                         if (designChoice <= 3) { print(ftable(summaryTable$tables[[length(summaryTable$tables)]]))
                         } else {
                              factorInOrder <- unlist(lapply(tempData[allFactor], nlevels))[order(unlist(lapply(tempData[allFactor], nlevels)))]
                              tableMeans <-eval(parse(text = paste("ftable(tapply(tempData[,'",respvar[i],"'], list(tempData[,'", paste(names(factorInOrder), collapse = "'],tempData[,'", sep = ""),"']), mean))", sep = "")))
                              names(attr(tableMeans, "row.vars")) <- names(factorInOrder[1:(length(allFactor) - 1)])
                              names(attr(tableMeans, "col.vars")) <- names(factorInOrder[length(allFactor)])
                              print(tableMeans)
                         }
                         cat("\n\n")
                    }
               }
          } ## END IF ELSE STMT
          
          # --- PRINT PAIRWISE MEANCOMPARISON RESULT --- #
          if (!is.null(sigEffect)) {
               if (!is.na(match(respvar[i], pwVar))) {
                    for (j in (1:length(sigEffect))) {
                         pairwiseComparison(tempAnova[[i]], design, trim.strings(sigEffect[j]), data = tempData, respvar[i], pwTest, siglevel = sig)
                    }     
               } else {
                    for (j in (1:length(sigEffect))) {
                         pairwiseComparison(tempAnova[[i]], design, trim.strings(sigEffect[j]), data = tempData, respvar[i], pwTest = NULL, siglevel = sig)
                    }     
               }
          }
          pwOption[[i]] <- list(rv = respvar[i], test = pwTest, sigEffect = sigEffect)
          cat("\n")	
          
          tempNewData <- cbind(tempData, residNfittedData)
          # -- save the dataset
          if (estimateData) {
               tempNewData <- merge(tempAllData[,-I(match(respvar[i],names(tempAllData)))], tempNewData)
               commonCol <- match(names(tempAllData),names(tempNewData))
               tempAllData <- cbind(tempNewData[,commonCol], tempNewData[,-I(commonCol)])
          } else { tempAllData <- merge(tempAllData, tempNewData) }
          
     } ### end stmt --- for (i in (1:length(respvar)))
     
     options(show.signif.stars = prev.option)
     return(invisible(list(data = tempAllData, aovObject = aovresult, rvWithSigEffect = rvWithSigEffect, aovTable = tempAnova, pwOption = pwOption, model = modelRHS, model2 = modelRHS2, alpha = sig)))
     
     
}