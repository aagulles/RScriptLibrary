##########################################################
#createQTLdata - function for creating/importing QTL data#
#
# REQUIRED input: 
# outputPath - folder where graph(s) will be saved
# dataFormat - format of data to be used, whether "default", "R", Map Maker", "Map Manager", "QTL Cartographer"
# format1 - format of the first input file, whether "csv", "ctxt", "stxt", "ttxt", or "sctxt" 
#           for default data format
# crossType - type of cross used, whether "f2", "bc", "risib", "riself", "bcsft"
# file1 - name of first input file
# format2 - format of the second input file, whether "csv", "ctxt", "stxt", "ttxt", or "sctxt" 
#           for default data format
# file2 - name of second input file
# format3 - format of the third input file, whether "csv", "ctxt", "stxt", "ttxt", or "sctxt" 
#           for default data format
# file3 - name of third input file
# P_geno - name of genotype variable
# bcNum - bc generation, if crosstype is "bcsft"
# fNum - filial generation, if crosstype is "bcsft"
#
# OUTPUT: a list with the following elements:
#  crossObj - an R object of class "cross"
#  crossCsv - name of the csv file equivalent to the cross object
#  cross - type of cross
#  bcGen - number corresponding to BC generation
#  fGen - number correpsonding to filial generation
#
##########################################################

createQTLdata <- function(outputPath, dataFormat, format1 = NULL, crossType= "f2", file1, format2 = NULL, file2 = NULL, format3 = NULL, file3 = NULL, 
                          P_geno = NULL, bcNum = 0, fNum = 0 )
  UseMethod("createQTLdata")

createQTLdata.default <- function(outputPath, dataFormat, format1 =  NULL, crossType = "f2", file1, format2 = NULL, file2 = NULL, format3 = NULL, file3 = NULL, 
                          P_geno = NULL, bcNum = 0, fNum = 0) {

  formatOpt = NULL
  datFile = file1
  
  #combining three input files for default format
  if (dataFormat == "default") {
    formatsep <- function(fformat) {
      switch(fformat, 
             csv = ",",
             ctxt = ",",
             stxt = " ",
             ttxt = "\t",
             sctxt = ";")
    }
    sep1 = formatsep(format1)
    sep2 = formatsep(format2)
    sep3 = formatsep(format3)
    
    #read in datasets
    data1 <- read.table(file1, header = TRUE, na.strings = c("NA",".",""), blank.lines.skip = TRUE, sep = sep1)
    data2 <- read.table(file2, header = TRUE, na.strings = c("NA","."), blank.lines.skip=TRUE, as.is = TRUE, sep = sep2)
    data3 <- read.table(file3, header = FALSE, na.strings = c("NA","."), blank.lines.skip=TRUE, as.is = TRUE, sep = sep3)
    
    #matching the three input files
    QTLdata <- QTL.dataprep(P_data = data1, G_data = data2, M_data = data3, P_geno)
    
    #ensure matching input files
    if (QTLdata$isNewPhenoCreated) P.data = QTLdata$P_data else P.data = data1
    if (QTLdata$isNewGenoCreated) G.data = QTLdata$G_data else G.data = data2
    if (QTLdata$isNewMapCreated) M.data = QTLdata$M_data else M.data = data3
    
#     genotype = "Geno"
    P.data<-P.data[match(G.data[,1],as.character(P.data[[match(P_geno,names(P.data))]])),]
    a<-matrix(rep("", (ncol(P.data)*2)), 2, ncol(P.data))
    colnames(a)<-colnames(P.data)
    names(a)<-names(P.data)
    b<-rbind(G.data[,0], t(M.data[,2:3]))
    names(b)<-as.character(M.data[,1])
    c<-data.frame(a,b, check.names=FALSE, stringsAsFactors=FALSE)
    rownames(c) <- c(rownames(a), rownames(b))
    
    G.id<- G.data[,1]#row.names(G.data)
    P.id <- as.character(P.data[[match(P_geno,names(P.data))]])
    if (sum(G.id!=P.id)>0) simpleError("IDs don't match") ##
    colnames(G.data)[1] <- P_geno
    e <- merge(P.data, G.data[1:nrow(G.data),], by = P_geno)
    f<-rbind(c,e)
    names(f)[1]= P_geno
    row.names(f) <- NULL
    datFile = paste(outputPath, "/crossData.csv", sep = "")
    write.csv(f, datFile, quote=FALSE, row.names=FALSE) #zz #
    
    formatOpt = "csv"
    file2 = NULL

  } else {
    if (dataFormat == "R") {
      formatOpt = "csv"
      
    } else if (dataFormat == "MapMaker") {
      formatOpt = "mm"
      
    } else if (dataFormat == "QTL Cartographer") {
      formatOpt = "qtlcart"
      
    } else if (dataFormat == "Map Manager") {
      formatOpt = "qtx"
      
    }
  }
  
  #create cross object
  if (crossType != "bcsft") { crossData <- read.cross(format = formatOpt, file = datFile, mapfile = file2, crosstype = crossType)  
  } else crossData <- read.cross(format = formatOpt, file = datFile, crosstype = crossType, BC.gen = bcNum, F.gen = fNum)  

  ###no need to pull-out for now
  #pull out phenotypic, genotypic, and map components from cross object
  #pData <- pull.pheno(crossData)
  #gData <- as.data.frame(pull.geno(crossData))
  #mData <- pull.map(crossData, as.table = TRUE)

###   mData <- cbind(M.data[,1], mData)
###   colnames(mData)[1] <- ""
  
  ##do not save?
  #save components into csv files
  #  write.csv(pData, paste(outputPath, "/phenoData.csv", sep = ""), row.names = F) 
  #  write.csv(gData, paste(outputPath, "/genoData.csv", sep = ""), row.names = F) 
  #  write.csv(mData, paste(outputPath, "/mapData.csv", sep = ""), row.names = F) 
  
  datFile = paste(outputPath, "/crossData", sep = "")
  write.cross(crossData, format = "csv", filestem = datFile)

  crossName = paste(datFile, ".csv")
  ##return crossData, crossType, bcNum and fNum
  return(list(crossObj = crossData, crossCsv = crossName, cross = crossType, bcGen = bcNum, fGen = fNum))
}
