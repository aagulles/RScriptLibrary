#-------------------------------------------------------------------------------------------------------------------------------------------------#
#     CLUSTER ANALYSIS FUNCTION (DIVISIVE)09.25.2012 Modified: 03.15.13                       	   							  	  #
#     ClusterDivisive <- function(data, var, stand= TRUE, distance, distMatrix, clusterMem, descriptiveStat, dendrogram, clusterBox, clusterNum)  #
#-------------------------------------------------------------------------------------------------------------------------------------------------#

ClusterDivisive <- function(data, var, idVar =NULL, stand = TRUE, distance = c("Euclidean", "Maximum", "Manhattan", "Minkowski", "Canberra"),
				distMatrix = FALSE, clusterMem = TRUE, descriptiveStat = TRUE, dendrogram = TRUE, clusterBox = TRUE, clusterNum=2, saveMem = TRUE, outputPath = NULL)
{
  	if (is.character(data)) { 
		nameData <- data
		if (!exists(nameData)) { stop(paste("The object '", nameData,"' does not exists.", sep = "")) }
		tempData <- eval(parse(text = data)) 
  	}else{
  	if (is.data.frame(data)) { 
		nameData <- paste(deparse(substitute(data)))	
		tempData <- data	
		} else { stop ("The argument should either be a data frame or a character string indicating the name of the data frame.") }
  	}  
	if (!is.data.frame(tempData)) { stop("The object should be of type data frame.") }
	if (!is.character(var)) 	{ stop(paste("The object 'var' should be a character vector.", sep = "")) }
	if (any(is.na(match(var, names(tempData))))) { stop("At least one item in the character vector 'var' does not match any variable name in the dataset.") }
  
	if (!is.null(idVar)) { 
		if (!is.character(idVar)) { stop(paste("The object 'idVar' should be a character vector.", sep = "")) }
		if (any(is.na(match(idVar, names(tempData))))) { stop("At least one item in the character vector 'idVar' does not match any variable name in the dataset.") }
		for (i in (1:length(idVar))) { if (!is.factor(tempData[,idVar[i]])) { tempData[,idVar[i]] <- factor(tempData[,idVar[i]]) }}
	}

	distance <- match.arg(distance)
  	options(width = 6000, digits = 3)
  	library(cluster)

  	if (distance == "Euclidean")
		{
  		if (stand){
      		a <- data.Normalization(tempData[,var], type = "n1")
      		adist <- dist(a, method = "euclidean")
    			}else
      		adist <- dist(tempData[,var], method = "euclidean")	
  		}
  	if (distance == "Maximum")
		{
    		if (stand){
      		a <- data.Normalization(tempData[,var], type = "n1")
      		adist <- dist(a, method = "maximum")
    			}else
      		adist <- dist(tempData[,var], method = "maximum")	
  		}
  	if (distance == "Manhattan")
		{
    		if (stand){
      		a <- data.Normalization(tempData[,var], type = "n1")
      		adist <- dist(a, method = "manhattan")
    			}else
      		adist <- dist(tempData[,var], method = "manhattan")	
  		}
  	if (distance == "Minkowski")
		{
    		if (stand){
      		a <- data.Normalization(tempData[,var], type = "n1")
      		adist <- dist(a, method = "minkowski")
    			}else
      		adist <- dist(tempData[,var], method = "minkowski")	
  		}
  	if (distance == "Canberra")
		{
    		if (stand){
      		a <- data.Normalization(tempData[,var], type = "n1")
      		adist <- dist(a, method = "canberra")
    			}else
      		adist <- dist(tempData[,var], method = "canberra")	
  		}

	cat("\nDIVISIVE CLUSTER ANALYSIS\n")  

	if (distMatrix){
	cat("\nDISTANCE MATRIX\n")
	print(adist)
  	}
	Rdiana <- diana(adist)

	Membership <- cutree(as.hclust(Rdiana), k = as.numeric(clusterNum))
	memData <- data.frame(Membership)

	if (clusterMem){
		cat("\nCLUSTER MEMBERSHIP SUMMARY\n")
	
	memSummary <- cbind(tempData[idVar], tempData[,var], memData)
	printDataFrame(memSummary)
  
	cat("\nNumber of members in each cluster\n\n")
	cat("Cluster number\t")
	for (i in (1:attributes(table(Membership))$dim)) {
		cat("\t",attributes(table(Membership))$dimnames$Membership[i])
		}
	cat("\n")
	cat("Cluster Size\t")
	for (i in (1:attributes(table(Membership))$dim)) {
		cat("\t",table(Membership)[i])
		}
	}
	
	if (!is.null(outputPath)) {
		if (dendrogram){
			png(paste(outputPath, "DivisiveGraph.png", sep = ""))	
			Rdiana <- diana(adist)
			temp1 <- data.frame(rownames = as.numeric(rownames(tempData)),idVar = tempData[,idVar])
			temp2 <- data.frame(rnorder = 1:length(Rdiana$order), rownames = Rdiana$order)
			temp3 <- merge(temp1, temp2, by.x = names(temp1)[1], by.y = names(temp2)[2])
			temp4 <- temp3[order(temp3[,3]),]
			Rdiana$order.lab <- as.character(temp4[,2])				
		  	plot(Rdiana,which=2,cex=0.6,main = "Dendrogram using Divisive Method", hang=-1)
	
			if (clusterBox){
				rect.hclust(tree=Rdiana, k=as.numeric(clusterNum), border=c("red", "blue", "green", "purple"))
			}
			dev.off()
		}
		if (saveMem){
			write.csv(data.frame(Rownames= rownames(memSummary), memSummary), row.names = FALSE, file=paste(outputPath, "MembershipSummary.csv", sep = ""))
		}
	}
	if (descriptiveStat){
		cat("\n")
		cat("\n")
		Cluster <- Membership
    		all <- cbind(tempData[,var], Cluster)
		DescriptiveStatistics(data = all, var = var, grp = "Cluster", statistics = c("mean", "sd", "min", "max"))
	}

  	Copcorr <- cophenetic(Rdiana)
	cop <- cor(adist, Copcorr)  
	cat("\nCOPHENETIC CORRELATION COEFFICIENT = ", cop, "\t\n")

  	return(list(ClusterMethod = adist, Membership = memSummary, CopheneticCorrelation = cop))

}#### end statement ClusterDivisive####
