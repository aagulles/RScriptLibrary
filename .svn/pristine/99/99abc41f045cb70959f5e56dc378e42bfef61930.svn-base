#----------------------------------------------------------------------------------#
#     PRINCIPAL COMPONENT ANALYSIS(PCA) FUNCTION 09.25.2012 MODIFIED 03.18.13      #
#     PCA(data, var, matx, transform, saveScore, outputPath)			     #
#----------------------------------------------------------------------------------#

PCA <-function(data, var, idVar = NULL, matx = c("corr","cov"), transform = c("zerocenter", "unitvar", "none"), saveScore = TRUE, outputPath = NULL) {
  
  	if (is.character(data)) { 
		nameData <- data
		if (!exists(nameData)) { stop(paste("The object '", nameData,"' does not exists.", sep = "")) }
		tempData <- eval(parse(text = data)) 
  	}else{
  	if (is.data.frame(data)) { 
		nameData <- paste(deparse(substitute(data)))	
		tempData <- data	
		} else { stop ("The argument should either be a data frame or a character string indicating the name of the data frame.") }
  	}
  
	if (!is.data.frame(tempData)) { stop("The object should be of type data frame.") }
	if (!is.character(var)) 	{ stop(paste("The object 'var' should be a character vector.", sep = "")) }
	if (any(is.na(match(var, names(tempData))))) { stop("At least one item in the character vector 'var' does not match any variable name in the dataset.") }

	if (!is.null(idVar)) { 
		if (!is.character(idVar)) { stop(paste("The object 'idVar' should be a character vector.", sep = "")) }
		if (any(is.na(match(idVar, names(tempData))))) { stop("At least one item in the character vector 'idVar' does not match any variable name in the dataset.") }
		for (i in (1:length(idVar))) { if (!is.factor(tempData[,idVar[i]])) { tempData[,idVar[i]] <- factor(tempData[,idVar[i]]) }}
	}

  	transform <- match.arg(transform)
  	options(width = 6000, digits = 4)

	#### ---- Output of the analysis ---- ####  

	if (matx == "corr"){
	pc <- prcomp(tempData[,var], scale = TRUE)
	}
	else if (matx == "cov"){
		
		if(transform == "zerocenter"){pc <- prcomp(tempData[,var], center = TRUE, scale = FALSE)}
		if(transform == "unitvar"){pc <- prcomp(tempData[,var], center = FALSE, scale = TRUE)}
		if(transform == "none"){pc <- prcomp(tempData[,var], center = FALSE, scale = FALSE)}		
	}

	#### ---- Function for displaying Descriptive Statistics ---- ####

  	DescriptiveStatistics(data = tempData, var = var, grp = NULL, statistics = c("nnmiss", "mean", "sd", "min", "max") )
  	
	pctable<- rbind(summary(pc)$importance, pc$sdev^2) 
  	rownames(pctable)[nrow(pctable)] <- "EigenValues"

  	cat("\nPRINCIPAL COMPONENT ANALYSIS\n")
		pctable<-data.frame(pctable)
		pcname<-data.frame(dimnames(pctable)[[1]])
		colnames(pcname) <- "Statistics"
		pcstat<-cbind(pcname, pctable)
		printDataFrame(pcstat, digits=4)
	cat("\n")

 	cat("\nEIGENVECTORS\n")
		vect<-data.frame(pc$rotation)
		pcvname<-data.frame(dimnames(vect)[[1]])
		colnames(pcvname) <- "Variables"
		pcvect<-cbind(pcvname, vect)
		printDataFrame(pcvect, digits=4)
	cat("\n")

	cat("\nPRINCIPAL COMPONENTS SCORES\n")
	score<- data.frame(pc$x)
	pcscore <- cbind(tempData[idVar], score)
	printDataFrame(pcscore, digits= 4)

	if (!is.null(outputPath)) {
		if (saveScore){
			write.csv(data.frame(Rownames= rownames(pcscore), pcscore), row.names = FALSE, file=paste(outputPath, "PCScores.csv", sep = ""))
		}
	}
  	return(list(PC = pc, SummaryTable = pctable))
  
}### end stmt (PCA Function)