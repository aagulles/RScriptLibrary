#----------------------------------------------------------------
# diallel analysis - Multi-environment       
# Griffing Method 3                          
# (F1's + Reciprocals)                       
# 
# SAS Script Created by: MS Kang                            
# R Script Created by: Violeta Bartolome   09.2011
# R Script Modified by: Nellwyn M. Levita  10.28.2011 
#----------------------------------------------------------------

diallel3TestME <-
function(design = c("CRD", "RCB", "Alpha", "RowColumn"), data, respvar, p1, p2, rep=NULL, block=NULL, row=NULL, column=NULL, cross=TRUE, individual=NULL, environment, alpha=0.05) {
  
  options(show.signif.stars=FALSE)
  data <- eval(parse(text = data))
	
  # --- trim the strings --- #
  respvar <- trim.strings(respvar)
  p1 <- trim.strings(p1)
  p2 <- trim.strings(p2)
  if (!is.null(block)) {block <- trim.strings(block) }
  if (!is.null(rep)) {rep <- trim.strings(rep) }
  if (!is.null(row)) {row <- trim.strings(row) }
  if (!is.null(column)) {column <- trim.strings(column) }
  if (!is.null(individual)) {individual <- trim.strings(individual) }
  environment <-trim.strings(environment)
  alpha <- trim.strings(alpha)
	
  # --- create titles --- #
  if (design == "CRD") { designName<-"CRD"}
  if (design == "RCB") { designName<-"RCB"}
  if (design == "Alpha") { designName<-"ALPHA-LATTICE"}
  if (design == "RowColumn") { designName<-"ROW-COLUMN"}
  
  if (cross) {parentsType<-"CROSS"
  } else {parentsType<-"SELF"}
  cat("\nMULTIPLE ENVIRONMENT ANALYSIS\n")
  cat("\nDIALLEL ANALYSIS: GRIFFING METHOD III IN ",designName, " (", parentsType, ")\n", sep="")
  
  # --- define factors --- #
  data[,match(p1, names(data))] <- factor(trim.strings(data[,match(p1, names(data))]))
  data[,match(p2, names(data))] <- factor(trim.strings(data[,match(p2, names(data))]))
  data[,match(environment, names(data))] <- factor(trim.strings(data[,match(environment, names(data))]))
  if (design == "RCB") {data[,match(block, names(data))] <- factor(trim.strings(data[,match(block, names(data))]))  }
  if (design == "Alpha") {
    data[,match(rep, names(data))] <- factor(trim.strings(data[,match(rep, names(data))]))  
    data[,match(block, names(data))] <- factor(trim.strings(data[,match(block, names(data))]))
  }
  if (design == "RowColumn") {
    data[,match(rep, names(data))] <- factor(trim.strings(data[,match(rep, names(data))]))  
    data[,match(row, names(data))] <- factor(trim.strings(data[,match(row, names(data))]))
    data[,match(column, names(data))] <- factor(trim.strings(data[,match(column, names(data))]))
  }
	
  #--- CREATION OF Matrices for GCA, SCA, REC, MAT, NORM ---#
  p <- length(unique(c(levels(data[,match(p1, names(data))]), levels(data[,match(p2, names(data))]))))
  i <- rep(1:p, each=p)
  j <- rep(1:p,p)
  ID <- data.frame(i,j,IDparent1=levels(data[,match(p1, names(data))])[i], IDparent2=levels(data[,match(p1, names(data))])[j])
  
  #--- for method 3 ---#
  M3 <- subset(ID, i != j)
  t <- nrow(M3)
  
  #--- GCA estimable effects ---#
  GCA <- as.matrix(rep(0,t*(p-1)),nrow=t, ncol=(p-1))
  dim(GCA) <- c(t,p-1)
  for (o in 1:t)
    for (n in 1:(p-1))  { 
      GCA[o,n] <- (as.logical(M3[o,"i"]==n)-
        as.logical(M3[o,"i"]==p))+
        (as.logical(M3[o,"j"]==n)-
        as.logical(M3[o,"j"]==p))  }
  colnames(GCA) <- paste("GCA", 1:(p-1), sep="")
  
  #--- SCA estimable effects ---#
  sca.col <- as.data.frame(subset(ID, (i<=(p-3) & (j >= i+1 & j<=(p-1)))))
  ncol <- nrow(sca.col)
  
  SCA <- as.matrix(rep(0,t*ncol),nrow=t, ncol=ncol)
  dim(SCA) <- c(t,ncol)
  
  for (o in 1:t)
    for (n in 1:ncol)  {
      SCA[o,n] <- as.logical(M3[o,"i"]==sca.col[n, "i"])*
        as.logical(M3[o,"j"]==sca.col[n, "j"])-
        (as.logical(M3[o,"i"]==sca.col[n, "i"])+
        as.logical(M3[o,"i"]==sca.col[n, "j"]))*
        as.logical(M3[o,"j"]==p)+
        as.logical(M3[o,"j"]==sca.col[n, "i"])*
        as.logical(M3[o,"i"]==sca.col[n, "j"])-
        as.logical(M3[o,"i"]==p)*
        (as.logical(M3[o,"j"]==sca.col[n, "i"])+
        as.logical(M3[o,"j"]==sca.col[n, "j"]))
      if (((M3[o,"i"]>=(p-2))&(M3[o,"j"]>=(p-1)))|((M3[o,"i"]>=(p-1))&(M3[o,"j"]>=(p-2))))   {
        SCA[o,n] <- -1*as.logical(M3[o,"i"]==(p-2))*
          as.logical(M3[o,"j"]==(p-1))+
          as.logical(M3[o,"i"]>=(p-2))*
          as.logical(M3[o,"j"]==p)*
          as.logical(M3[o,"i"]!=sca.col[n,"j"])-
          as.logical(M3[o,"j"]==(p-2))*
          as.logical(M3[o,"i"]==(p-1))+
          as.logical(M3[o,"j"]>=(p-2))*
          as.logical(M3[o,"i"]==p)*
          as.logical(M3[o,"j"]!=sca.col[n,"j"])  
      }
    }
  colnames(SCA) <- paste("SCA",sca.col$"i", sca.col$j, sep="")
  
  #--- Reciprocal estimable effects ---#
  rec.col <- as.data.frame(subset(ID, (i<=(p-1) & (j >= i+1 & j<=p))))
  ncol <- nrow(rec.col)
  
  REC <- as.matrix(rep(0,t*ncol),nrow=t, ncol=ncol)
  dim(REC) <- c(t,ncol)
  
  for (o in 1:t)
    for (n in 1:ncol)  {
      REC[o,n] <- as.logical(M3[o,"i"]==rec.col[n,"i"])*
        as.logical(M3[o,"j"]==rec.col[n,"j"])-
        as.logical(M3[o,"j"]==rec.col[n,"i"])*
        as.logical(M3[o,"i"]==rec.col[n,"j"])   }
  colnames(REC) <- paste("REC", rec.col$i,rec.col$j,sep="")
  
  #--- Maternal estimable effects ---#
  MAT <- as.matrix(rep(0,t*(p-1)),nrow=t, ncol=(p-1))
  dim(MAT) <- c(t,p-1)
  
  for (o in 1:t)
    for (n in 1:(p-1))  { 
      MAT[o,n] <- as.logical(M3[o,"i"]==n)+
        as.logical(M3[o,"j"]==p)-
        as.logical(M3[o,"j"]==n)-
        as.logical(M3[o,"i"]==p)   
    }
  colnames(MAT) <- paste("MAT", 1:(p-1), sep="")
  
  #--- NonMaternal estimable effects ---#
  nonm.col <- as.data.frame(subset(ID, (i<=(p-2) & (j >= i+1 & j<=(p-1)))))
  ncol <- nrow(nonm.col)
  
  NONM <- as.matrix(rep(0,t*ncol),nrow=t, ncol=ncol)
  dim(NONM) <- c(t,ncol)
  
  for (o in 1:t)
    for (n in 1:ncol)  {
      NONM[o,n] <- (as.logical(M3[o,"i"]==nonm.col[n,"i"])*
        as.logical(M3[o,"j"]==nonm.col[n,"j"]))-
        as.logical(M3[o,"i"]==nonm.col[n,"j"])*
        as.logical(M3[o,"j"]==nonm.col[n,"i"])+
        ((as.logical(M3[o,"i"]==nonm.col[n,"j"])-
        as.logical(M3[o,"i"]==nonm.col[n,"i"]))*
        as.logical(M3[o,"j"]==p))+
        (as.logical(M3[o,"i"]==p)*
        (as.logical(M3[o,"j"]==nonm.col[n,"i"])-
        as.logical(M3[o,"j"]==nonm.col[n,"j"])))     
    }
  colnames(NONM) <- paste("NONM", nonm.col$i,nonm.col$j,sep="")
  # end of CREATION OF GCA, SCA, REC, MAT, NONM 
  
  library(doBy)
	result <- list()
	for (z in (1:length(respvar))) {
		result[[z]] <- list()
		cat("\n-----------------------------")
		cat("\nRESPONSE VARIABLE: ", respvar[z], "\n", sep="")
		cat("-----------------------------\n")
		
		if (design == "CRD") {
			vec<-c(match(p1, names(data)), match(p2, names(data)), match(environment, names(data)), match(respvar[z], names(data)))
			temp2.data <-subset(data, select=vec)  
		}
		if (design == "RCB") {
			vec<-c(match(p1, names(data)), match(p2, names(data)), match(environment, names(data)), match(block, names(data)), match(respvar[z], names(data)))
			temp2.data <-subset(data, select=vec)
		}
		if (design == "Alpha") {
		  vec<-c(match(p1, names(data)), match(p2, names(data)), match(environment, names(data)), match(rep, names(data)), match(block, names(data)), match(respvar[z], names(data)))
		  temp2.data <-subset(data, select=vec)  
		}
		if (design == "RowColumn") {
		  vec<-c(match(p1, names(data)), match(p2, names(data)), match(environment, names(data)), match(rep, names(data)), match(row, names(data)), match(column, names(data)), match(respvar[z], names(data)))
		  temp2.data <-subset(data, select=vec)  
		}
		temp.data <- temp2.data[(is.na(temp2.data[,match(respvar[z], names(temp2.data))]) == FALSE),]
	
		# --- create new column containing treatment combinations --- #
		temp.data$crossEnv<-factor(paste(temp.data[,p1], ":", temp.data[,p2], ":", temp.data[,environment], sep=""))
		temp.data<-temp.data[order(temp.data$crossEnv),]
		
		# --- compute harmonic mean that will be used later in the estimation of genetic variances --- #
		lengthPerCross<-tapply(temp.data[,respvar[z]], temp.data$crossEnv, length)
		repHarmonicMean<-1/mean((1/lengthPerCross), na.rm=TRUE)
		
		e <- nlevels(temp.data[,match(environment, names(temp.data))])
		if (design == "CRD") {
		  # --- add column Rep --- #
		  temp.data<-data.frame(temp.data, Rep=sequence(lengthPerCross))
		  
		  nlevelsRep<-max(lengthPerCross, na.rm=TRUE) 
		}
		if (design == "RCB") {nlevelsRep <- nlevels(temp.data[,match(block, names(temp.data))]) }
		if (design == "Alpha" || design == "RowColumn") {nlevelsRep <- nlevels(temp.data[,match(rep, names(temp.data))]) }
    
		nBalance<-(p*p*e*nlevelsRep)-(p*nlevelsRep*e)
		temp.data<-temp.data[-c(match("crossEnv", names(temp.data)))]
    
		# --- data summary --- #
		funcTrialSum <- class.information2(names(temp.data),temp.data)
		cat("\nDATA SUMMARY: ","\n\n", sep="")
		print(funcTrialSum)
		cat("\n Number of observations read: ",nrow(temp.data), sep="")
		cat("\n Number of missing observations: ",nBalance-nrow(temp.data), sep="")
    
		# --- check if raw data is balanced. If not, generate estimates for missing values --- #
		canEstimateMissing <- TRUE
		cat("\n\n\nANOVA TABLE:\n\n")
		if ((nrow(temp.data)/nBalance) >= 0.90) {
		  if (nrow(temp.data) == nBalance) {
		    anovaRemark <- "REMARK: Raw dataset is balanced."
		    dataForAnova<-temp.data  
		  } else {
		    # estimate missing values per environment
		    dataForAnova<-NULL
		    for (x in (1:e)) {
		      if (design == "CRD") {
		        tempSplit<-temp.data[temp.data[,environment]==levels(temp.data[,match(environment, names(temp.data))])[x],]
		        tempDataForAnova<-tempSplit[,c(p1, p2, "Rep", respvar[z])]
		        tempDataForAnova[,match("Rep", names(tempDataForAnova))] <- factor(trim.strings(tempDataForAnova[,match("Rep", names(tempDataForAnova))]))
		        balancedData<-generateBalancedData(design="DIALLEL3", data=tempDataForAnova, respvar[z], p1, p2, "Rep")
		        tempDataForAnova<-estimateMissingData(design="CRD", data=balancedData, respvar[z], p1, p2, "Rep")
		        tempDataForAnova<-tempDataForAnova[,c(p1, p2, "Rep", respvar[z])]
		      }
		      if (design == "RCB") {
		        tempSplit<-temp.data[temp.data[,environment]==levels(temp.data[,match(environment, names(temp.data))])[x],]
		        tempDataForAnova<-tempSplit[,c(p1, p2, block, respvar[z])]
		        balancedData<-generateBalancedData(design="DIALLEL3", data=tempDataForAnova, respvar[z], p1, p2, block)
		        tempDataForAnova<-estimateMissingData(design="RCB", data=balancedData, respvar[z], p1, p2, block)
		        tempDataForAnova<-tempDataForAnova[,c(p1, p2, block, respvar[z])]
		      }
		      if (design == "Alpha") {
		        temp2Split<-temp2.data[temp2.data[,environment]==levels(temp2.data[,match(environment, names(temp2.data))])[x],]
		        tempSplit<-temp.data[temp.data[,environment]==levels(temp.data[,match(environment, names(temp.data))])[x],]
		        if (nrow(tempSplit)==nBalance/e) {
		          tempDataForAnova<-tempSplit[,c(p1, p2, rep, block, respvar[z])]
		        } else {
		          if (nrow(temp2Split)==nBalance/e) {
		            tempDataForAnova<-temp2Split[,c(p1, p2, rep, block, respvar[z])]
		            tempDataForAnova<-estimateNA(design="Alpha", fullData=tempDataForAnova, respvar[z], p1, p2, rep, block, row=NULL, column=NULL)
		          } else {
		            tempDataForAnova<-temp2Split[,c(p1, p2, rep, block, respvar[z])]
		            canEstimateMissing<-FALSE
		          }
		        }
		      }
		      if (design == "RowColumn") {
		        temp2Split<-temp2.data[temp2.data[,environment]==levels(temp2.data[,match(environment, names(temp2.data))])[x],]
		        tempSplit<-temp.data[temp.data[,environment]==levels(temp.data[,match(environment, names(temp.data))])[x],]
		        if (nrow(tempSplit)==nBalance/e) {
		          tempDataForAnova<-tempSplit[,c(p1, p2, rep, row, column, respvar[z])]
		        } else {
		          if (nrow(temp2Split)==nBalance/e) {
		            tempDataForAnova<-temp2Split[,c(p1, p2, rep, row, column, respvar[z])]
		            tempDataForAnova<-estimateNA(design="RowColumn", fullData=tempDataForAnova, respvar[z], p1, p2, rep, block=NULL, row, column)
		          } else {
		            tempDataForAnova<-temp2Split[,c(p1, p2, rep, row, column, respvar[z])]
		            canEstimateMissing<-FALSE
		          }
		        }
		      }
		      tempDataForAnova$EnvIndex<-levels(temp.data[,match(environment, names(temp.data))])[x]
		      dataForAnova<-rbind(dataForAnova,tempDataForAnova)
		    }
		    colnames(dataForAnova)[match("EnvIndex",names(dataForAnova))]<-environment
		    dataForAnova[,match(environment, names(dataForAnova))] <- factor(dataForAnova[,match(environment, names(dataForAnova))])
		    
		    if (canEstimateMissing==TRUE) {anovaRemark <- "REMARK: Raw data and estimates of the missing values are used."
		    } else {anovaRemark <- "REMARK: Cannot estimate missing values because some treatment combinations are not specified in the data."}
		    
		  }  
      
		  r<-nlevelsRep
		  
		  if (canEstimateMissing==TRUE) {
		    # --- one-step ANOVA --- #
		    #if (design == "CRD") {myformula1 <- paste(respvar[z], " ~ ", environment, " + ", p1, ":", p2, " + ", environment, ":", p1, ":", p2, sep = "") }
		    #if (design == "RCB") {myformula1 <- paste(respvar[z], " ~ ", environment, " + ", block, ":", environment," + ", p1, ":", p2, " + ", environment, ":", p1, ":", p2, sep = "") }
		    
		    # --- two-step ANOVA --- #
		    if (design == "CRD") {
		      # --- step 1 ANOVA ---#
		      myformula1 <- paste(respvar[z], " ~ ", environment, sep = "")
		      out1 <- anova(aov(formula(myformula1), data = dataForAnova))
		      totalSS1<-sum(out1[,2])
		      totalDF1<-sum(out1[,1])
		      
		      # --- step 2 ANOVA ---#
		      # --- compute the means --- #
		      myformula2 <- paste(respvar[z], " ~ ", p1, "+", p2," + ", environment, sep = "")
		      meanData<-summaryBy (formula(myformula2),data=dataForAnova,FUN=c(mean))
		      
		      myformula3 <- paste(respvar[z], ".mean ~ ", p1, ":", p2," + ", environment, sep = "")
		      out2<-anova(aov(formula(myformula3),data=meanData))
		      
		      DFvector2<-out2[,1]
		      SSvector2<-r*out2[,2]
		      totalDF2<-sum(out2[,1])
		      totalSS2<-sum(r*out2[,2])
		      
		      # --- construct ANOVA table --- #
		      ESS<-totalSS1-totalSS2
		      EDF<-totalDF1- totalDF2
		      Df<-c(DFvector2,EDF)
		      SS<-round(c(SSvector2,ESS),digits=2)
		      MS<-round(SS/Df,digits=2)
		      F_value<-round(c(MS[1]/MS[4],MS[2]/MS[3],MS[3]/MS[4],MS[4]/MS[4]),digits=2)
		      p_value<-round(pf(F_value,Df,c(Df[4],Df[3],Df[4],Df[4]),lower.tail = F),digits=4)
		      AOV<-cbind(Df,SS, MS,F_value,p_value)
		      
		      row.names(AOV)<-c(environment,"Hybrid",paste("Hybrid x ",environment,sep=""),"Error")
		      AOV[4,4:5]<-NA
		    }      
		    
		    if (design == "RCB") {
		      # --- step 1 ANOVA ---#
		      myformula1 <- paste(respvar[z], " ~ ", block, ":", environment," + ", environment, sep = "")
		      out1 <- anova(aov(formula(myformula1), data = dataForAnova))
		      blockEnv <- paste(block, ":", environment,sep="")
		      repEnvDF <- out1[rownames(out1)==blockEnv,"Df"]
		      repEnvSS <- out1[rownames(out1)==blockEnv,"Sum Sq"]
		      totalSS1<-sum(out1[,2])
		      totalDF1<-sum(out1[,1])
		      
		      # --- step 2 ANOVA ---#
		      # --- compute the means --- #
		      myformula2 <- paste(respvar[z], " ~ ", p1, "+", p2," + ", environment, sep = "")
		      meanData<-summaryBy (formula(myformula2),data=dataForAnova,FUN=c(mean))
		      
		      myformula3 <- paste(respvar[z], ".mean ~ ", p1, ":", p2," + ", environment, sep = "")
		      out2<-anova(aov(formula(myformula3),data=meanData))
		      
		      envDF<-out2[rownames(out2)==environment,"Df"]
		      envSS<-r*out2[rownames(out2)==environment,"Sum Sq"]
		      DFvector2<-out2[2:3,1]
		      SSvector2<-r*out2[2:3,2]
		      totalDF2<-sum(out2[,1])
		      totalSS2<-sum(r*out2[,2])
		      
		      # --- construct ANOVA table --- #
		      ESS<-totalSS1-totalSS2-repEnvSS
		      EDF<-totalDF1- totalDF2-repEnvDF
		      Df<-c(envDF,repEnvDF,DFvector2,EDF)
		      SS<-round(c(envSS,repEnvSS,SSvector2,ESS),digits=2)
		      MS<-round(SS/Df,digits=2)
		      F_value<-round(c(MS[1]/MS[2],MS[2]/MS[5],MS[3]/MS[4],MS[4]/MS[5],MS[5]/MS[5]),digits=2)
		      p_value<-round(pf(F_value,Df,c(Df[2],Df[5],Df[4],Df[5],Df[5]),lower.tail = F),digits=4)
		      AOV<-cbind(Df,SS, MS,F_value,p_value)
		      
		      row.names(AOV)<-c(environment,paste(block,"(",environment,")",sep=""),"Hybrid",paste("Hybrid x ",environment,sep=""),"Error")
		      AOV[5,4:5]<-NA
		    }
		    
		    if (design == "Alpha") {
		      # --- step 1 ANOVA ---#
		      myformula1 <- paste(respvar[i], " ~ ", environment, " + ", environment, ":", rep, " + ", environment, ":", rep, ":", block, sep = "")
		      out1 <- anova(aov(formula(myformula1), data = dataForAnova))
		      envRepDF <- out1[rownames(out1)==paste(environment, ":", rep,sep=""),"Df"]
		      envRepSS <- out1[rownames(out1)==paste(environment, ":", rep,sep=""),"Sum Sq"]
		      envRepBlockDF<-out1[rownames(out1)==paste(environment, ":", rep,":", block, sep=""),"Df"]
		      envRepBlockSS<-out1[rownames(out1)==paste(environment, ":", rep,":", block, sep=""),"Sum Sq"]
		      totalSS1<-sum(out1[,2])
		      totalDF1<-sum(out1[,1])
		      
		      # --- step 2 ANOVA ---#
		      # --- compute the means --- #
		      myformula2 <- paste(respvar[z], " ~ ", p1, "+", p2," + ", environment, sep = "")
		      meanData<-summaryBy (formula(myformula2),data=dataForAnova,FUN=c(mean))
		      
		      myformula3 <- paste(respvar[z], ".mean ~ ", p1, ":", p2," + ", environment, sep = "")
		      out2<-anova(aov(formula(myformula3),data=meanData))
		      
		      envDF<-out2[rownames(out2)==environment,"Df"]
		      envSS<-r*out2[rownames(out2)==environment,"Sum Sq"]
		      DFvector2<-out2[2:3,1]
		      SSvector2<-r*out2[2:3,2]
		      totalDF2<-sum(out2[,1])
		      totalSS2<-sum(r*out2[,2])
		      
		      # --- construct ANOVA table --- #
		      ESS<-totalSS1-totalSS2-envRepSS-envRepBlockSS
		      EDF<-totalDF1-totalDF2-envRepDF-envRepBlockDF
		      Df<-c(envDF,envRepDF,envRepBlockDF,DFvector2,EDF)
		      SS<-round(c(envSS,envRepSS,envRepBlockSS,SSvector2,ESS),digits=2)
		      MS<-round(SS/Df,digits=2)
		      F_value<-round(c(MS[1]/MS[2],MS[2]/MS[6],MS[3]/MS[6],MS[4]/MS[5],MS[5]/MS[6],MS[6]/MS[6]),digits=2)
		      p_value<-round(pf(F_value,Df,c(Df[2],Df[6],Df[6],Df[5],Df[6],Df[6]),lower.tail = F),digits=4)
		      AOV<-cbind(Df,SS, MS,F_value,p_value)
		      
		      row.names(AOV)<-c(environment,paste(environment,":",rep,sep=""),paste(environment,":",rep,":",block,sep=""),"Hybrid",paste("Hybrid x ",environment,sep=""),"Error")
		      AOV[6,4:5]<-NA
		    }
		    
		    if (design == "RowColumn") {
		      # --- step 1 ANOVA ---#
		      myformula1 <- paste(respvar[i], " ~ ", environment, " + ", environment, ":", rep, " + ", environment, ":", rep, ":", row, " + ", environment, ":", rep, ":", column, sep = "") 
		      out1 <- anova(aov(formula(myformula1), data = dataForAnova))
		      envRepDF <- out1[rownames(out1)==paste(environment, ":", rep,sep=""),"Df"]
		      envRepSS <- out1[rownames(out1)==paste(environment, ":", rep,sep=""),"Sum Sq"]
		      envRepRowDF<-out1[rownames(out1)==paste(environment, ":", rep,":", row, sep=""),"Df"]
		      envRepRowSS<-out1[rownames(out1)==paste(environment, ":", rep,":", row, sep=""),"Sum Sq"]
		      envRepColumnDF<-out1[rownames(out1)==paste(environment, ":", rep,":", column, sep=""),"Df"]
		      envRepColumnSS<-out1[rownames(out1)==paste(environment, ":", rep,":", column, sep=""),"Sum Sq"]
		      totalSS1<-sum(out1[,2])
		      totalDF1<-sum(out1[,1])
		      
		      # --- step 2 ANOVA ---#
		      # --- compute the means --- #
		      myformula2 <- paste(respvar[z], " ~ ", p1, "+", p2," + ", environment, sep = "")
		      meanData<-summaryBy (formula(myformula2),data=dataForAnova,FUN=c(mean))
		      
		      myformula3 <- paste(respvar[z], ".mean ~ ", p1, ":", p2," + ", environment, sep = "")
		      out2<-anova(aov(formula(myformula3),data=meanData))
		      
		      envDF<-out2[rownames(out2)==environment,"Df"]
		      envSS<-r*out2[rownames(out2)==environment,"Sum Sq"]
		      DFvector2<-out2[2:3,1]
		      SSvector2<-r*out2[2:3,2]
		      totalDF2<-sum(out2[,1])
		      totalSS2<-sum(r*out2[,2])
		      
		      # --- construct ANOVA table --- #
		      ESS<-totalSS1-totalSS2-envRepSS-envRepRowSS-envRepColumnSS
		      EDF<-totalDF1-totalDF2-envRepDF-envRepRowDF-envRepColumnDF
		      Df<-c(envDF,envRepDF,envRepRowDF,envRepColumnDF,DFvector2,EDF)
		      SS<-round(c(envSS,envRepSS,envRepRowSS,envRepColumnSS,SSvector2,ESS),digits=2)
		      MS<-round(SS/Df,digits=2)
		      F_value<-round(c(MS[1]/MS[2],MS[2]/MS[7],MS[3]/MS[7],MS[4]/MS[7],MS[5]/MS[6],MS[6]/MS[7],MS[7]/MS[7]),digits=2)
		      p_value<-round(pf(F_value,Df,c(Df[2],Df[7],Df[7],Df[7],Df[6],Df[7],Df[7]),lower.tail = F),digits=4)
		      AOV<-cbind(Df,SS, MS,F_value,p_value)
		      
		      row.names(AOV)<-c(environment,paste(environment,":",rep,sep=""),paste(environment,":",rep,":",row,sep=""),paste(environment,":",rep,":",column,sep=""),"Hybrid",paste("Hybrid x ",environment,sep=""),"Error")
		      AOV[7,4:5]<-NA
		    }
		  
  		  print(AOV,na.print="")
  		  cat("-------\n")
  		  cat(anovaRemark)
  		  cat("\n")
  		  result[[z]]$anova.table <- AOV
  		  		
  		  # compute Sum of Squares of GCA, SCA, REc, MAT, NORM
  		  data.all.gca <- merge(meanData, as.data.frame(cbind(M3,GCA,SCA,REC)), by.x=c(p1,p2), by.y=c("IDparent1","IDparent2"))
  		  data.all.gca <- data.all.gca[,-c(match("i", names(data.all.gca)),match("j", names(data.all.gca)))]
  		  
  		  myformula4 <- paste(respvar[z],".mean ~ ", environment, " + . - ", p1, " - ", p2, " + (. - ", p1, " - ", p2, "):",environment, sep = "")
  		  
  		  #GCA
  		  out.gca <- anova(aov(formula(myformula4), data = data.all.gca))
  		  GCA.effect <- subset(out.gca, substr(rownames(out.gca),1,3)=="GCA")
  		  GCA.df <- sum(GCA.effect$Df)
  		  GCA.SS <- sum(GCA.effect$"Sum Sq")*r
  		  GCA.MS <- GCA.SS/GCA.df
  		  
  		  envgca <- paste(environment, ":GCA",sep="")
  		  GCAxE.effect <- subset(out.gca, substr(rownames(out.gca),1,(nchar(environment)+4))==envgca)
  		  GCAxE.df <- sum(GCAxE.effect$Df)
  		  GCAxE.SS <- sum(GCAxE.effect$"Sum Sq")*r
  		  GCAxE.MS <- GCAxE.SS/GCAxE.df
  		  
  		  #SCA
  		  SCA.effect <- subset(out.gca, substr(rownames(out.gca),1,3)=="SCA")
  		  SCA.df <- sum(SCA.effect$Df)
  		  SCA.SS <- sum(SCA.effect$"Sum Sq")*r
  		  SCA.MS <- SCA.SS/SCA.df
  		  
  		  envsca <- paste(environment, ":SCA",sep="")
  		  SCAxE.effect <- subset(out.gca, substr(rownames(out.gca),1,(nchar(environment)+4))==envsca)
  		  SCAxE.df <- sum(SCAxE.effect$Df)
  		  SCAxE.SS <- sum(SCAxE.effect$"Sum Sq")*r
  		  SCAxE.MS <- SCAxE.SS/SCAxE.df
  		  
  		  #REC
  		  REC.effect <- subset(out.gca, substr(rownames(out.gca),1,3)=="REC")
  		  REC.df <- sum(REC.effect$Df)
  		  #REC.SS <- sum(REC.effect$"Sum Sq")*r
  		  REC.SS <- AOV[row.names="Hybrid",col.names="SS"]-GCA.SS-SCA.SS
  		  REC.MS <- REC.SS/REC.df
  		  
  		  envrec <- paste(environment, ":REC",sep="")
  		  RECxE.effect <- subset(out.gca, substr(rownames(out.gca),1,(nchar(environment)+4))==envrec)
  		  RECxE.df <- sum(RECxE.effect$Df)
  		  #RECxE.SS <- sum(RECxE.effect$"Sum Sq")*r
  		  RECxE.SS <-AOV[row.names=paste("Hybrid x ",environment,sep=""),col.names="SS"]-GCAxE.SS-SCAxE.SS
  		  RECxE.MS <- RECxE.SS/RECxE.df
  		  
  		  # MAT
  		  data.all.gca <- merge(meanData, as.data.frame(cbind(M3,GCA,SCA,MAT,NONM)), by.x=c(p1,p2), by.y=c("IDparent1","IDparent2"))
  		  data.all.gca <- data.all.gca[,-c(match("i", names(data.all.gca)),match("j", names(data.all.gca)))]
  		  
  		  out.mat <- anova(aov(formula(myformula4), data = data.all.gca))
  		  MAT.effect <- subset(out.mat, substr(rownames(out.mat),1,3)=="MAT")
  		  MAT.df <- sum(MAT.effect$Df)
  		  MAT.SS <- sum(MAT.effect$"Sum Sq")*r
  		  MAT.MS <- MAT.SS/MAT.df
  		  
  		  envmat <- paste(environment, ":MAT",sep="")
  		  MATxE.effect <- subset(out.mat, substr(rownames(out.mat),1,(nchar(environment)+4))==envmat)
  		  MATxE.df <- sum(MATxE.effect$Df)
  		  MATxE.SS <- sum(MATxE.effect$"Sum Sq")*r
  		  MATxE.MS <- MATxE.SS/MATxE.df
  		  
  		  #NONM
  		  NONM.effect <- subset(out.mat, substr(rownames(out.mat),1,4)=="NONM")
  		  NONM.df <- sum(NONM.effect$Df)
  		  #NONM.SS <- sum(NONM.effect$"Sum Sq")*r
  		  NONM.SS <- REC.SS-MAT.SS
  		  NONM.MS <- NONM.SS/NONM.df
  		  
  		  envnonm <- paste(environment, ":NONM",sep="")
  		  NONMxE.effect <- subset(out.mat, substr(rownames(out.mat),1,(nchar(environment)+5))==envnonm)
  		  NONMxE.df <- sum(NONMxE.effect$Df)
  		  #NONMxE.SS <- sum(NONMxE.effect$"Sum Sq")*r
  		  NONMxE.SS <- RECxE.SS-MATxE.SS
  		  NONMxE.MS <- NONMxE.SS/NONMxE.df
  		  
  		  # --- construct ANOVA table --- #
  		  DF=c(GCA.df,SCA.df,REC.df,MAT.df,NONM.df,GCAxE.df,SCAxE.df,RECxE.df,MATxE.df,NONMxE.df,EDF)
  		  SS=round(c(GCA.SS,SCA.SS,REC.SS,MAT.SS,NONM.SS,GCAxE.SS,SCAxE.SS,RECxE.SS,MATxE.SS,NONMxE.SS,ESS),digits=2)
  		  MS<-round(SS/DF,digits=2)
  		  F_value<-round(c(MS[1]/MS[6],MS[2]/MS[7],MS[3]/MS[8],MS[4]/MS[9],MS[5]/MS[10],MS[6]/MS[11],MS[7]/MS[11],MS[8]/MS[11],MS[9]/MS[11],MS[10]/MS[11],MS[11]/MS[11]),digits=2)
  		  p_value<-round(pf(F_value,DF,c(DF[6],DF[7],DF[8],DF[9],DF[10],DF[11],DF[11],DF[11],DF[11],DF[11],DF[11]),lower.tail = F),digits=4)
  		  AOV2<-cbind(DF,SS, MS,F_value,p_value)
  		  
  		  row.names(AOV2)<-c("GCA", "SCA", "REC", "  MAT", "  NONM", "GCAxE", "SCAxE", "RECxE", "  MATxE", "  NONMxE", "Error")
  		  AOV2[11,4:5]<-NA
  		  
  		  cat("\n\nANOVA TABLE:\n\n")
  		  print(AOV2, na.print="")
  		  cat("-------\n")
  		  cat(anovaRemark)
  		  cat("\n")
  		  result[[z]]$anova2.table <- AOV2
  		
    		# --- Estimates of GCA, SCA, and REC effects --- #
    		
    		myformula4<- paste(respvar[z], " ~ ", p1," + ",p2, sep = "")
    		meandata <- summaryBy(formula(myformula4), data=temp.data)
    		
    		# serial to parallel of meandata
    		mdata <- as.matrix(rep(0,p*p),nrow=p, ncol=p)
    		dim(mdata) <- c(p,p)
    		
    		for (I in 1:p)  {
    			for (J in 1:p)   {
    				if (I != J) mdata[I,J] <- meandata[(meandata[,match(p1, names(meandata))]==levels(temp.data[,match(p1, names(temp.data))])[I] & meandata[,match(p2, names(meandata))]==levels(temp.data[,match(p1, names(temp.data))])[J]),3]
    			} 
    		}
    		colnames(mdata) <- rownames(mdata) <- levels(temp.data[,match(p1, names(temp.data))])
    		
    		# printing the matrix of means
    		mdata2 <- format(round(mdata, 4),nsmall=4)
    		mdata3 <-noquote(format(gsub(" 0.0000", "", mdata2),justify="right"))
    		cat("\n\nMATRIX OF MEANS:\n\n")
    		print(mdata3)
  		  cat("-------\n")
  		  cat(anovaRemark)
  		  cat("\n")
    		result[[z]]$means.matrix <- mdata3
    		
    		XI <- rowSums(mdata)
    		XJ <- colSums(mdata)		
    		SUMX <- sum(mdata)
    		
    		#----- Estimates of GCA Effects -----#
    		G_SCA <- as.matrix(rep(0,p*p),nrow=p, ncol=p)
    		dim(G_SCA) <- c(p,p)
    		for (I in 1:p)  {
    			for (J in 1:p)   {
    				if (I == J) G_SCA[I,J] <- (1/(2*p*(p-2)))*(p*(XI[I]+XJ[J])-(2*SUMX))
    			} 
    		}
    		
    		#----- Estimates of SCA Effects -----#
    		for (I in 1:p)  {
    			for (J in 1:p)   {
    				if (I < J)   {
    					B1 <-(1/2)*(mdata[I,J]+mdata[J,I])
    					B2 <- (1/(2*(p-2)))* (XI[I] + XJ[I] + XI[J] + XJ[J])
    					B3 <- (1/((p-1)*(p-2)))*SUMX
    					G_SCA[I,J] <- B1 - B2 + B3
    				}
    			} 
    		}
    		
    		#----- Estimates of Reciprocal Effects -----#
    		for (I in 1:p)  {
    			for (J in 1:p)   {
    				if (I > J)   G_SCA[I,J] <- (1/2)*(mdata[J,I] - mdata[I,J])
    			} 
    		}
    		
    		colnames(G_SCA) <- rownames(G_SCA) <- levels(temp.data[,match(p1, names(temp.data))])
    		G_SCA2 <-noquote(format(round(G_SCA, digits=4), nsmall=4))
    		cat("\n\nGENERAL COMBINING ABILITY EFFECTS, SPECIFIC COMBINING ABILITY EFFECTS\n")
    		cat("(above diagonal) AND RECIPROCAL EFFECTS (below diagonal):\n")
    		cat("AVERAGED OVER ENVIRONMENTS:\n\n")
    		print(G_SCA2)
    		result[[z]]$gcasca.matrix <- G_SCA2
    		
    		# --- estimates of standard errors --- #
    		EMS<-ESS/EDF
    		MEPRIME <-EMS/r  
    		Ve <- MEPRIME
    		SE_GI <- sqrt((p-1)*Ve/(2*e*p*(p-2)))
    		LSD_GI <- NA
    		SE_SIJ <- sqrt((p-3)*Ve/(2*e*(p-1)))
    		LSD_SIJ <- NA
    		SE_RIJ <- sqrt(Ve/(2*e))
    		LSD_RIJ <- NA
    		
    		SE_Gdiff <- sqrt(Ve/(e*(p-2)))
    		LSD_Gdiff <- qt(.975,EDF)*SE_Gdiff
    		SE_SIJ_SIK <- sqrt((p-3)*Ve/(e*(p-2)))
    		LSD_SIJ_SIK <- qt(.975,EDF)*SE_SIJ_SIK
    		SE_SIJ_SKL <- sqrt((p-4)*Ve/(e*(p-2)))
    		LSD_SIJ_SKL <- qt(.975,EDF)*SE_SIJ_SKL
    		
    		STDERR <- round(rbind(SE_GI,SE_SIJ, SE_RIJ, SE_Gdiff, SE_SIJ_SIK, SE_SIJ_SKL), digits=4)
    		LSD <- round(rbind(LSD_GI,LSD_SIJ, LSD_RIJ, LSD_Gdiff, LSD_SIJ_SIK, LSD_SIJ_SKL),digits=4)
    		VAREST <- as.table(cbind(STDERR, LSD))
    		
    		rownames(VAREST) <- c(' Gi', ' Sij', ' Rij', ' Gi-Gj', ' Sij-Sik', ' Sij-Skl')
    		colnames(VAREST) <- c("Std. Error", "LSD")
    		cat("\n\nTABLE OF STANDARD ERRORS AND LSDs:\n\n")
    		print(VAREST)
    		result[[z]]$stderror.table <- VAREST
    		
    		#--- Variance Component ---#
    		
    		Vg <- (GCA.MS-GCAxE.MS-SCA.MS+SCAxE.MS)/(2*r*e*(p-2))
    		Vs <- (SCA.MS-SCAxE.MS)/(2*r*e)
    		Vr <- (REC.MS-RECxE.MS)/(2*r*e)
    		Vge <- (GCAxE.MS-SCAxE.MS)/(2*r*(p-2))
    		Vse <- (SCAxE.MS-EMS)/(2*r)
    		Vre <- (RECxE.MS-EMS)/(2*r)
    		
    		VC <- round(rbind(Vg, Vs, Vr, Vge, Vse, Vre, EMS), digits=4)
    		colnames(VC) <- c("Estimate")
    		rownames(VC) <- c(" GCA", " SCA", " REC"," GCAxE", " SCAxE", " RECxE", " Error")
    		TABLE <- as.table(VC)
    		cat("\n\nESTIMATES OF VARIANCE COMPONENTS:\n\n")
    		print(TABLE)
    		result[[z]]$var.components <-TABLE
    		
    		if (Vg<0) Vg <- 0
    		if (Vs<0) Vs <- 0
    		if (Vr<0) Vr <- 0
    		if (Vge<0) Vge <- 0
    		if (Vse<0) Vse <- 0
    		if (Vre<0) Vre <- 0
    		
    		#---- Genetic Variance components ----#
    		if (cross) {F<-0
        } else {F<-1}
        
    		VA <- (4/(1+F))*Vg
    		VD <- (4/(1+F)^2)*Vs
    		if (VD < 0) VD <- 0
    		VAE <- (4/(1+F))*Vge
    		VDE <- (4/(1+F)^2)*Vse
    		if (VDE < 0) VDE <- 0
    		VE <- EMS
    		VP <- VA + VD + VAE + VDE+ VE
    		h2B <- (VA + VD) / VP               # individual based
    		h2N <- VA / VP                 	    # individual based
    		Dominance.ratio <- sqrt(2*VD/VA)   
    		
		    VA_p<-formatNumericValue(VA)
		    VAE_p<-formatNumericValue(VAE)
		    VD_p<-formatNumericValue(VD)
		    VDE_p<-formatNumericValue(VDE)
		    h2N_p<-formatNumericValue(h2N)
		    h2B_p<-formatNumericValue(h2B)
		    Dominance.ratio_p<-formatNumericValue(Dominance.ratio)
		    
		    Estimate <- rbind(VA_p, VAE_p,  VD_p, VDE_p, h2N_p, h2B_p, Dominance.ratio_p)
		    with.colheader<-format(rbind("Estimate", Estimate), justify="right")
		    colnames(with.colheader) <- c("")
		    rownames(with.colheader) <- c("", " VA", " VAxE", " VD", " VDxE", " h2-narrow sense", " H2-broad sense", " Dominance Ratio")
		    TABLE2 <- as.table(with.colheader)
		    cat("\n\nESTIMATES OF GENETIC VARIANCE COMPONENTS:\n")
		    print(TABLE2)
    		result[[z]]$genvar.components <-TABLE2 
		  } else {
		    cat("\n",anovaRemark)
		  }
		} else {anovaRemark <- "ERROR: Too many missing values. Cannot perform the analysis." 
		        cat("\n",anovaRemark)
		}
		
		cat("\n")
		cat("\n==============================================================\n")
	}## end of loop (z)
  detach("package:doBy")
  return(list(output = result))
  
}

