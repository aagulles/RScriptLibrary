#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
#     CLUSTER ANALYSIS FUNCTION (DIVISIVE)09.25.2012 Modified: 03.15.13                       	   							  	                                                        #
#     ClusterDivisive <- function(data, var, idVar, binVar, factorVar, stand= TRUE, distance, distMatrix, clusterMem, descriptiveStat, dendrogram, clusterBox, clusterNum)  #
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------#

ClusterDivisive <- function(data, var = NULL, idVar =NULL,binVar = NULL, factorVar = NULL, stand = TRUE, 
                            distance = c("Euclidean", "Maximum", "Manhattan", "Minkowski", "Canberra", "Binary", "Simple Matching", "Jaccard", "Dice", "Gower"),
				                    distMatrix = FALSE, clusterMem = TRUE, descriptiveStat = TRUE, dendrogram = TRUE, clusterBox = TRUE, 
                            clusterNum=2, saveMem = TRUE, outputPath = NULL)
UseMethod("ClusterDivisive") 
  
ClusterDivisive.default <- function(data, var = NULL, idVar =NULL,binVar = NULL, factorVar = NULL, stand = TRUE, 
                              distance = c("Euclidean", "Maximum", "Manhattan", "Minkowski", "Canberra", "Binary", "Simple Matching", "Jaccard", "Dice", "Gower"),
                              distMatrix = FALSE, clusterMem = TRUE, descriptiveStat = TRUE, dendrogram = TRUE, clusterBox = TRUE, 
                              clusterNum=2, saveMem = TRUE, outputPath = NULL)
  
  
  {
  if (is.character(data)) { 
    nameData <- data
    if (!exists(nameData)) { stop(paste("The object '", nameData,"' does not exists.", sep = "")) }
    tempData <- eval(parse(text = data)) 
  }else{
    if (is.data.frame(data)) { 
      nameData <- paste(deparse(substitute(data)))  
      tempData <- data  
    } else { stop ("The argument should either be a data frame or a character string indicating the name of the data frame.") }
  } 
  tempData <- na.omit(tempData)
  if (!is.data.frame(tempData)) { stop("The object should be of type data frame.") }
  
  if (!is.null(var))     { 
    if (!is.character(var)) 	{ stop(paste("The object 'var' should be a character vector.", sep = "")) }  
    if (any(is.na(match(var, names(tempData))))) { stop("At least one item in the character vector 'var' does not match any variable name in the dataset.") }
    tempVar <- tempData[var]  
  }
  
  if (!is.null(idVar))   	{ 
    if (any(is.na(match(idVar, names(tempData))))) { stop("At least one item in the character vector 'idVAr' does not match any variable name in the dataset.") }
    tempGrp <- tempData[idVar]
    for (i in (1:ncol(tempGrp))) { tempGrp[,i] <- factor(tempGrp[,i]) }
  } else { tempGrp <- rep(1, each = nrow(tempData)) }
  
  if (!is.null(binVar))     { 
    if (any(is.na(match(binVar, names(tempData))))) { stop("At least one item in the character vector 'binVar' does not match any variable name in the dataset.") }
    tempBinVar <- tempData[binVar]
    for (i in (1:ncol(tempBinVar))) { tempBinVar[,i] <- factor(tempBinVar[,i]) }
    if(nlevels(tempBinVar[,i] != 2)) { stop("The variable is not binary") }
  } else { tempBinVar <- rep(1, each = nrow(tempData)) }
  
  if (!is.null(factorVar))     { 
    if (any(is.na(match(factorVar, names(tempData))))) { stop("At least one item in the character vector 'binVar' does not match any variable name in the dataset.") }
    tempfactorVar <- tempData[factorVar]
    for (i in (1:ncol(tempfactorVar))) { tempfactorVar[,i] <- factor(tempfactorVar[,i]) }
  } else { tempfactorVar <- rep(1, each = nrow(tempData)) }
  
  options(width = 6000, digits = 3)
	distance <- match.arg(distance)


  # ------------------first condition var not null---------------------- 
  
  if(!is.null(var) & (is.null(binVar) & is.null(factorVar))){
    if(stand){
      x <- tempData[,var]
      z <- var
      a <- data.Normalization(x, type = "n1")
      adist <- dist(a, method = tolower(distance))
    }else adist <- dist(x, method = tolower(distance))
  }
  
  #---------------------------------------------------------------------  
  #------------------second condition binVar not null-------------------  
  
  if(!is.null(binVar) & (is.null(var) & is.null(factorVar))){
    x<- tempData[,binVar]
    z <- binVar
    if(distance == "Simple Matching"){
      adist <- dist.binary(x, method = 2)
    }
    if(distance == "Jaccard"){
      adist <- dist(x, method = "binary")
    }
    if(distance == "Dice"){
      adist <- dist.binary(x, method = 5)
    }   
  }
  
  #--------------------------------------------------------------------  
  #------------------third condition all not null----------------------
  
  if((!is.null(var) & !is.null(binVar)) & is.null(factorVar)){
    x<- tempData[c(var,binVar)]
    z<- c(var,binVar)
    adist <- daisy(x, metric = tolower(distance))
  }   
  if((!is.null(var) & !is.null(factorVar)) & is.null(binVar)){
    x<- tempData[c(var,factorVar)]
    z<- c(var, factorVar)
    adist <- daisy(x, metric = tolower(distance))
  }                  
  if((!is.null(binVar) & !is.null(factorVar)) & is.null(var)){
    x<-tempData[c(binVar,factorVar)]
    z<- c(binVar, factorVar)
    adist <- daisy(x, metric = tolower(distance))
  }    
  if((!is.null(var) & !is.null(binVar)) & !is.null(factorVar)){
    x<- tempData[c(var,binVar, factorVar)]
    z<- c(var,binVar,factorVar)
    adist <- daisy(x, metric = tolower(distance))
  }

	cat("\nDIVISIVE CLUSTER ANALYSIS\n")  

	if (distMatrix){
	  cat("\nDISTANCE MATRIX\n")
	  print(adist)
  	}
	Rdiana <- diana(adist)
	Membership <- cutree(as.hclust(Rdiana), k = as.numeric(clusterNum))
	memData <- data.frame(Membership)

	if (clusterMem){
		cat("\nCLUSTER MEMBERSHIP SUMMARY\n")
	
	memSummary <- cbind(tempData[idVar], x, memData)
	printDataFrame(memSummary)
    
		cat("\nNumber of members in each cluster\n")
		a<- data.frame(table(Membership))
		colnames(a)<- "Cluster"
		colnames(a)[2] <-"Size"
		printDataFrame(a)  
# 	cat("\nNumber of members in each cluster\n\n")
# 	cat("Cluster number\t")
# 	for (i in (1:attributes(table(Membership))$dim)) {
# 		cat("\t",attributes(table(Membership))$dimnames$Membership[i])
# 		}
# 	cat("\n")
# 	cat("Cluster Size\t")
# 	for (i in (1:attributes(table(Membership))$dim)) {
# 		cat("\t",table(Membership)[i])
# 		}
    
	}
	
	if (!is.null(outputPath)) {
		if (dendrogram){
			png(paste(outputPath, "DivisiveGraph.png", sep = ""))	
			Rdiana <- diana(adist)
			temp1 <- data.frame(rownames = as.numeric(rownames(tempData)),idVar = tempData[,idVar])
			temp2 <- data.frame(rnorder = 1:length(Rdiana$order), rownames = Rdiana$order)
			temp3 <- merge(temp1, temp2, by.x = names(temp1)[1], by.y = names(temp2)[2])
			temp4 <- temp3[order(temp3[,3]),]
			Rdiana$order.lab <- as.character(temp4[,2])				
		  	plot(Rdiana,which=2,cex=0.6,main = "Dendrogram using Divisive Method", hang=-1)
	
			if (clusterBox){
				rect.hclust(tree=Rdiana, k=as.numeric(clusterNum), border=c("red", "blue", "green", "purple"))
			}
			dev.off()
		}
		if (saveMem){
			write.csv(data.frame(Rownames= rownames(memSummary), memSummary), row.names = FALSE, file=paste(outputPath, "MembershipSummary.csv", sep = ""))
		}
	}
	if (descriptiveStat){
		cat("\n")
		cat("\n")
		Cluster <- Membership
    		all <- cbind(x, Cluster)
		DescriptiveStatistics(data = all, var = var, grp = "Cluster", statistics = c("mean", "sd", "min", "max"))
	}

  	Copcorr <- cophenetic(Rdiana)
	  cop <- cor(adist, Copcorr)  
	  cat("\nCOPHENETIC CORRELATION COEFFICIENT = ", cop, "\t\n")

  	return(list(ClusterMethod = adist, Membership = memSummary, CopheneticCorrelation = cop))

}#### end statement ClusterDivisive####
