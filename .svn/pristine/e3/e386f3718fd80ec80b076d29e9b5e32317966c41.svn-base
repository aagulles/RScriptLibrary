#----------------------------------------------------------------#
#     PRINCIPAL COMPONENT ANALYSIS(PCA) FUNCTION 09.25.2012      #
#     PCA(data, var, transform)				           #
#----------------------------------------------------------------#

PCA <-function(data, var, transform = c("normal", "center")) {
  
  	if (is.character(data)) { 
		nameData <- data
		if (!exists(nameData)) { stop(paste("The object '", nameData,"' does not exists.", sep = "")) }
		tempData <- eval(parse(text = data)) 
  	}else{
  	if (is.data.frame(data)) { 
		nameData <- paste(deparse(substitute(data)))	
		tempData <- data	
		} else { stop ("The argument should either be a data frame or a character string indicating the name of the data frame.") }
  	}
  
	if (!is.data.frame(tempData)) { stop("The object should be of type data frame.") }
	if (!is.character(var)) 	{ stop(paste("The object 'var' should be a character vector.", sep = "")) }
	if (any(is.na(match(var, names(tempData))))) { stop("At least one item in the character vector 'var' does not match any variable name in the dataset.") }

  	transform <- match.arg(transform)
  	options(width = 5000, digits = 6)

	#### ---- Output of the analysis ---- ####  

  	if (transform == "normal") PCAmethod = TRUE else PCAmethod = FALSE
  	pc <- prcomp(tempData[,var], scale = PCAmethod) # Performs Principal Component Analysis

	#### ---- Function for displaying Descriptive Statistics ---- ####

  	DescriptiveStatistics(data = tempData, var = var, grp = NULL, statistics = c("nnmiss", "mean", "sd", "min", "max") )
  	
	pctable<- rbind(summary(pc)$importance, pc$sdev^2) 
  	rownames(pctable)[nrow(pctable)] <- "EigenValues"
  	cat("\nPRINCIPAL COMPONENT ANALYSIS\n")
  	print(pctable)

  	cat("\nEIGENVECTORS\n")
  	print(pc$rotation)# displays Eigenvectors/ Variable Loadings

  	cat("\nPRINCIPAL COMPONENTS SCORES\n")
  	print(pc$x)# displays PCA Scores
  	return(list(PC = pc, SummaryTable = pctable))
  
}### end stmt (PCA Function)